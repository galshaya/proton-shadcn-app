This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
components.json
jsconfig.json
next.config.mjs
package.json
postcss.config.mjs
PROTON - Content curation and delivery system.md
Proton Backend Specs.md
Proton Product Req.md
public/file.svg
public/globe.svg
public/next.svg
public/proton logo.svg
public/proton.svg
public/vercel.svg
public/window.svg
README.md
src/app/globals.css
src/app/layout.js
src/app/page.js
src/app/projects/[id]/page.js
src/app/projects/page.js
src/app/scraping-packages/page.js
src/app/settings/page.js
src/components/forms/persona-form.jsx
src/components/forms/project-form.jsx
src/components/forms/recipient-form.jsx
src/components/forms/scraping-package-config-form.jsx
src/components/forms/scraping-package-form.jsx
src/components/layout/main-nav.jsx
src/components/layout/site-header.jsx
src/components/persona-form.jsx
src/components/recipient-form.jsx
src/components/scraping-package-history.jsx
src/components/ui/alert-dialog.jsx
src/components/ui/badge.jsx
src/components/ui/button.jsx
src/components/ui/calendar.jsx
src/components/ui/card.jsx
src/components/ui/data-table.jsx
src/components/ui/input.jsx
src/components/ui/label.jsx
src/components/ui/modal.jsx
src/components/ui/nav.jsx
src/components/ui/popover.jsx
src/components/ui/select.jsx
src/components/ui/status-badge.jsx
src/components/ui/switch.jsx
src/components/ui/table.jsx
src/components/ui/tabs.jsx
src/components/ui/textarea.jsx
src/lib/mock-data.js
src/lib/utils.js
tailwind.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="jsconfig.json">
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="PROTON - Content curation and delivery system.md">
# **PROTON** {#proton}

## **AI-powered content curation and delivery system** {#ai-powered-content-curation-and-delivery-system}

Proton CRM Product Specification Document  
Date: 20.02.2025  
Project name: Proton CRM Product Specification Document  
Client: Proto

[**PROTON	1**](#proton)

[AI-powered content curation and delivery system	1](#ai-powered-content-curation-and-delivery-system)

[Introduction	3](#introduction)

[Purpose	3](#purpose)

[Scope	4](#scope)

[Target audience	4](#target-audience)

[Overview	4](#overview)

[Core Pages	4](#core-pages)

[Login	4](#login)

[Home	4](#home)

[Projects	4](#projects)

[Single project	4](#single-project)

[Project document archive	5](#project-document-archive)

[Project newsletter settings	5](#project-newsletter-settings)

[Persona & Recipient Management	5](#persona-&-recipient-management)

[Edit persona	5](#edit-persona)

[Scraping packages archive	5](#scraping-packages-archive)

[Scraping package configuration	5](#scraping-package-configuration)

[Global settings	5](#global-settings)

[Core Modules	6](#core-modules)

[Users	6](#users)

[Search Bar	6](#search-bar)

[Login page	6](#login-page)

[Authentication	6](#authentication)

[Credential Fields	6](#credential-fields)

[Actions & Options	6](#actions- &-options)

[Error Handling	7](#error-handling)

[Styling & UX	7](#styling- &-ux)

[Security Considerations	7](#security-considerations)

[Post-Login Flow	7](#post-login-flow)

[Forgot password process	7](#forgot-password-process)

[Home Page	7](#home-page)

[Header & Navigation	7](#header- &-navigation)

[Search bar	8](#search-bar-1)

[Purpose	8](#purpose-1)

[UI Behavior	8](#ui-behavior)

[Key Metrics & Stats	9](#key-metrics- &-stats)

[Recent Projects Section	10](#recent-projects-section)

[Recent Activity Feed	11](#recent-activity-feed)

[Projects page	12](#projects-page)

[Purpose	12](#purpose-2)

[UI Layout & Components	12](#ui-layout- &-components)

[Key Functionalities	13](#key-functionalities)

[Data Model & Fields	13](#data-model- &-fields)

[Error Handling & Validation	14](#error-handling- &-validation)

[Security & Permissions	15](#security- &-permissions)

[Future Enhancements	15](#future-enhancements)

[Single Project page	15](#single-project-page)

[Purpose	15](#purpose-3)

[UI Layout & Sections	16](#ui-layout- &-sections)

[Key Functionalities	17](#key-functionalities-1)

[Data Model	17](#data-model)

[Security & Permissions	19](#security- &-permissions-1)

[Validations & Error Handling	19](#validations- &-error-handling)

[UI Reference	19](#ui-reference)

[Future Enhancements	19](#future-enhancements-1)

## **UI Components and Interactions** {#ui-components-and-interactions}

### **Common Components** {#common-components}

#### **Modals and Dialogs** {#modals-and-dialogs}

##### **Create/Edit Project Modal**
- **Purpose**: Create new projects or edit existing ones
- **Fields**:
  - Project Name (required)
  - Description (required)
  - Status (Active/Archived)
- **Actions**:
  - Save
  - Cancel
- **Validation**:
  - Name must be unique
  - Required fields must be filled
  - Description max length: 500 characters

##### **Upload Document Modal**
- **Purpose**: Upload new documents to a project
- **Features**:
  - Drag and drop support
  - File type validation
  - Size limit (10MB)
  - Progress indicator
- **Actions**:
  - Upload
  - Cancel
- **Validation**:
  - File size check
  - File type check
  - Duplicate name check

##### **Add/Edit Recipient Modal**
- **Purpose**: Add new recipients or edit existing ones
- **Fields**:
  - Name (required)
  - Email (required)
  - Persona (required)
  - Status (Active/Inactive)
- **Actions**:
  - Save
  - Cancel
- **Validation**:
  - Email format
  - Required fields
  - Unique email per project

##### **Configure Scraping Package Modal**
- **Purpose**: Set up or modify scraping packages
- **Fields**:
  - Package Name (required)
  - Description (required)
  - Schedule (required)
  - Status (Active/Inactive)
- **Actions**:
  - Save
  - Test Run
  - Cancel
- **Validation**:
  - Required fields
  - Valid schedule format
  - Unique name

#### **Tables and Lists** {#tables-and-lists}

##### **Projects Table**
- **Columns**:
  - Name
  - Description
  - Status
  - Last Updated
  - Actions
- **Features**:
  - Sortable columns
  - Pagination
  - Search/filter
  - Bulk actions
- **Row Actions**:
  - Edit
  - Archive
  - View Details

##### **Documents List**
- **Display Mode**:
  - Grid view
  - List view
- **Item Information**:
  - File name
  - Type
  - Size
  - Upload date
  - Actions
- **Features**:
  - Sort by date
  - Filter by type
  - Search
- **Item Actions**:
  - Download
  - Delete
  - Preview

##### **Recipients Table**
- **Columns**:
  - Name
  - Email
  - Persona
  - Status
  - Actions
- **Features**:
  - Sortable columns
  - Filter by status
  - Search
  - Bulk actions
- **Row Actions**:
  - Edit
  - Remove
  - Change Status

#### **Forms and Inputs** {#forms-and-inputs}

##### **Newsletter Configuration Form**
- **Fields**:
  - Subject Line
  - Schedule
  - Recipients Selection
  - Content Template
- **Features**:
  - Rich text editor
  - Template selection
  - Preview
  - Schedule picker
- **Validation**:
  - Required fields
  - Valid date/time
  - At least one recipient

##### **Persona Configuration Form**
- **Fields**:
  - Name
  - Description
  - Tone Settings
  - Content Preferences
- **Features**:
  - Tone selector
  - Keyword input
  - Content type selection
- **Validation**:
  - Required fields
  - Valid tone selection
  - Valid preferences

#### **Navigation Components** {#navigation-components}

##### **Main Navigation**
- **Items**:
  - Home
  - Projects
  - Scraping Packages
  - Settings
- **Features**:
  - Active state indication
  - Collapsible on mobile
  - Quick actions menu

##### **Project Navigation**
- **Items**:
  - Overview
  - Documents
  - Recipients
  - Newsletters
  - Settings
- **Features**:
  - Breadcrumb navigation
  - Tab-based navigation
  - Quick actions

#### **Status Indicators** {#status-indicators}

##### **Project Status**
- **States**:
  - Active (green)
  - Archived (gray)
  - Pending (yellow)
- **Features**:
  - Color coding
  - Status text
  - Hover tooltip

##### **Newsletter Status**
- **States**:
  - Scheduled (blue)
  - Sent (green)
  - Failed (red)
  - Draft (gray)
- **Features**:
  - Color coding
  - Status text
  - Progress indicator

##### **Recipient Status**
- **States**:
  - Active (green)
  - Inactive (gray)
  - Unsubscribed (red)
- **Features**:
  - Color coding
  - Status text
  - Last activity date

### **Interactive Features** {#interactive-features}

#### **Drag and Drop** {#drag-and-drop}
- **Supported Areas**:
  - Document upload
  - Recipient reordering
  - Project card reordering
- **Visual Feedback**:
  - Drop zone highlighting
  - Drag preview
  - Success/error animations

#### **Real-time Updates** {#real-time-updates}
- **Features**:
  - Live status changes
  - Progress indicators
  - Toast notifications
- **Update Types**:
  - Document upload progress
  - Newsletter sending status
  - Scraping job status

#### **Search and Filter** {#search-and-filter}
- **Global Search**:
  - Projects
  - Documents
  - Recipients
- **Advanced Filters**:
  - Date range
  - Status
  - Type
  - Persona

#### **Bulk Actions** {#bulk-actions}
- **Supported Operations**:
  - Delete multiple items
  - Update status
  - Export data
- **UI Elements**:
  - Checkbox selection
  - Action toolbar
  - Confirmation dialog

### **Responsive Design** {#responsive-design}

#### **Breakpoints** {#breakpoints}
- **Mobile**: < 640px
- **Tablet**: 640px - 1024px
- **Desktop**: > 1024px

#### **Mobile Adaptations** {#mobile-adaptations}
- **Navigation**:
  - Hamburger menu
  - Bottom navigation
  - Swipe gestures
- **Tables**:
  - Card view
  - Horizontal scroll
  - Expandable rows
- **Forms**:
  - Full-width inputs
  - Stacked layout
  - Touch-friendly controls

#### **Tablet Optimizations** {#tablet-optimizations}
- **Layout**:
  - Split view
  - Side-by-side panels
  - Adaptive grid
- **Navigation**:
  - Collapsible sidebar
  - Tab navigation
  - Quick actions menu

### **Accessibility** {#accessibility}

#### **Keyboard Navigation** {#keyboard-navigation}
- **Focus Management**:
  - Logical tab order
  - Focus indicators
  - Skip links
- **Shortcuts**:
  - Global actions
  - Navigation
  - Common operations

#### **Screen Reader Support** {#screen-reader-support}
- **ARIA Labels**:
  - Interactive elements
  - Status messages
  - Form controls
- **Semantic HTML**:
  - Proper heading structure
  - Landmark regions
  - Live regions

#### **Color and Contrast** {#color-and-contrast}
- **Color Usage**:
  - Status indicators
  - Interactive elements
  - Text hierarchy
- **Contrast Ratios**:
  - Text: 4.5:1
  - Large text: 3:1
  - UI components: 3:1

### **Error Handling** {#error-handling}

#### **Form Validation** {#form-validation}
- **Real-time Validation**:
  - Field-level feedback
  - Error messages
  - Success states
- **Submission Validation**:
  - Form-level errors
  - Required fields
  - Format validation

#### **API Error Handling** {#api-error-handling}
- **Error States**:
  - Network errors
  - Validation errors
  - Server errors
- **User Feedback**:
  - Error messages
  - Retry options
  - Fallback content

#### **Offline Support** {#offline-support}
- **Features**:
  - Offline indicators
  - Data persistence
  - Sync status
- **User Experience**:
  - Clear messaging
  - Recovery options
  - Progress tracking

## **Introduction** {#introduction}

### **Purpose** {#purpose}

The purpose of this document is to provide a comprehensive technical specification for the Proton AI-powered content curation and delivery system. This system is designed to enhance the ongoing engagement of consulting clients by providing tailored content post-project completion, utilizing advanced AI capabilities integrated within a robust CRM interface.

### **Scope** {#scope}

Proton is an AI-powered content curation and delivery system with comprehensive CRM capabilities. Its purpose is to keep past consulting clients informed and engaged by automating the delivery of relevant, industry-specific content, and by managing client interactions and enabling content customization.

### **Target audience** {#target-audience}

This CRM is intended for Proto's internal teams who oversee content curation, client project engagements, and the creation of tailored personas for newsletters and other outreach. By centralizing these tasks, the system streamlines document uploads, scraping configurations, and persona-based content delivery, ensuring each client receives insights customized to their needs and roles

### **Overview** {#overview}

The document will detail the functionalities intended for the Proton CRM system, describe the interactions users will have with the platform, and outline the technical infrastructure required to support these operations .This document outlines the scope of work required for the CRM development team.

## **Core Pages** {#core-pages}

### **Login** {#login}

* The admin login page has a clean design with fields for email and password, It can contain security features like CAPTCHA.  
* UI Reference: Missing

### **Home** {#home}

* Dashboard view provides an overview of projects, recipients, packages, and newsletters, with detailed information about recent project activity.  
* UI Reference: "Home" screen in [wireframes](https://www.figma.com/design/O56Uaw3NQQvS2wLZK1n0Dy/Proton-Wireframes-0213?node-id=0-1&p=f&t=8jgp2AXxUuAbwcNU-0).

### **Projects** {#projects}

* A project archive that allows you to create new projects with summarized project information.  
* UI Reference: Missing.

### **Single project** {#single-project}

* Gives detailed information of a single project. Has the ability to edit a project, view project dashboards, view metrics (documents, scraping packages, recipients, next newsletter date).  
* UI Reference: "Projects" screen in [wireframes](https://www.figma.com/design/O56Uaw3NQQvS2wLZK1n0Dy/Proton-Wireframes-0213?node-id=0-1&p=f&t=8jgp2AXxUuAbwcNU-0).

#### **Project document archive** {#project-document-archive}

* Provides an overview of all uploaded documents and enables file management, including uploading, downloading, and deleting files.  
* UI Reference: Missing

#### **Project newsletter settings** {#project-newsletter-settings}

* Displays the newsletter settings for current projects and allows users to edit and save them.  
* UI Reference: Missing

#### **Persona & Recipient Management** {#persona- &-recipient-management}

* Displays an archive of personas and recipients with the ability to create, edit and delete them.  
* UI Reference: "Persona & Recipient" screen in [wireframes](https://www.figma.com/design/O56Uaw3NQQvS2wLZK1n0Dy/Proton-Wireframes-0213?node-id=0-1&p=f&t=8jgp2AXxUuAbwcNU-0).

#### **Edit persona** {#edit-persona}

* Allows for the modification of persona information, tone & prompt preferences, and the uploading of documents and packages.  
* UI Reference: "Edit persona" screen in [wireframes](https://www.figma.com/design/O56Uaw3NQQvS2wLZK1n0Dy/Proton-Wireframes-0213?node-id=0-1&p=f&t=8jgp2AXxUuAbwcNU-0).

### **Scraping packages archive** {#scraping-packages-archive}

* Presents a repository of Scraping packages that can be edited, activated and deactivated.  
* UI Reference: Missing.

### **Scraping package configuration** {#scraping-package-configuration}

* Enables users to set up and manage automated data ingestion sources for a specific target audience.  
* UI Reference: Missing.

### **Global settings** {#global-settings}

* Modify organisation name, time zone, AI module selection, SMTP configuration, and security and privacy settings in General settings.  
* UI Reference: "Global settings" screen in [wireframes](https://www.figma.com/design/O56Uaw3NQQvS2wLZK1n0Dy/Proton-Wireframes-0213?node-id=0-1&p=f&t=8jgp2AXxUuAbwcNU-0).

## **Core Modules** {#core-modules}

### **Users** {#users}

* The user is typically an internal staff member with assigned permissions (e.g., Admin, Editor) who manages project-related tasks such as uploading documents, configuring scraping packages, and scheduling newsletters. They aim to keep each project's data organized and ensure smooth delivery of relevant updates to various recipients.  
* UI Reference: "Home" screen in [wireframes](https://www.figma.com/design/O56Uaw3NQQvS2wLZK1n0Dy/Proton-Wireframes-0213?node-id=0-1&p=f&t=8jgp2AXxUuAbwcNU-0), located in the header. A profile page is missing.


### **Search Bar** {#search-bar}

* **Search bar:** A search box with auto-suggestions to find projects, documents, or recipients.

## **Login page** {#login-page}

### **Authentication** {#authentication}

* The CEM login page is the entry page where users are prompted to enter their login credentials (email or username and password). It includes a "Remember Me" checkbox and a link to reset passwords. Upon successful login, users are directed to the home page dashboard.

### **Credential Fields** {#credential-fields}

* **Username or Email Field**: A text field for the user's unique identifier.  
* **Password Field**: An obscured input for password entry.

### **Actions & Options** {#actions- &-options}

* **Login Button**: Submits the credentials to the authentication service.  
* **Remember Me** (optional): A checkbox so users can remain logged in for a period of 10 days.  
* **Forgot Password** Link: Initiates a password reset flow (e.g., email-based recovery).

### **Error Handling** {#error-handling}

* If the user enters invalid credentials, an error message (e.g., "Incorrect username or password") is displayed in the modal.  
* Security best practices dictate limiting the number of login attempts to 4 times and including a CAPTCHA if unusual activity is detected.

### **Styling & UX** {#styling- &-ux}

* A clean, minimal layout with clear labels and spacing.  
* Prominent call-to-action (Login Button) to reduce user confusion.  
* Branding elements (logo, color scheme) for a consistent user experience.

### **Security Considerations** {#security-considerations}

* **HTTPS/TLS** enforced to protect credentials in transit.

### **Post-Login Flow** {#post-login-flow}

* On successful login, users are redirected to the **CEM** home page dashboard, where they can see their projects, data summaries, and navigation menus.

### **Forgot password process** {#forgot-password-process}

* **User Trigger:** The user clicks the "Forgot Password" link within the login modal.  
* **Email Prompt:** A secondary prompt appears, asking the user to enter their registered email address.  
* **Secure Reset Link:** An email is sent containing a unique, time-limited link.  
* **Password Reset Form:** Clicking the link directs the user to a page where they can enter and confirm a new password.  
* **Confirmation:** After submission, the system updates their credentials, and the user can log in with the newly set password. The user will be provided with a login link.

## **Home Page** {#home-page}

### **Header & Navigation** {#header- &-navigation}

* **Branding/Logo:** Appears at the top-left, identifying the CEM platform.  
* **Primary Navigation Links:**  
  * **Home:** Returns to this main dashboard.  
  * **Projects:** View and manage all active or archived projects.  
  * **Scraping Packages:** Configure and manage data-gathering modules.  
  * **Global Settings:** Adjust organization-wide preferences (e.g., time zone, email server, default AI settings).  
* **User Profile:** The user profile picture is displayed at the top-right. The signout link appears when hovering over the user profile picture.  
* **Search bar:** An interactive input field that sends queries to the backend for matching projects, documents, or recipients, supporting real-time suggestions (e.g., auto-complete or typeahead) to help users quickly locate specific items

| Data Name | Data Type | Data Description |
| :---- | :---- | :---- |
| brandLogo | String (URL) | The image or icon URL used to display the platform's logo in the header. |
| brandName | String | A textual label (e.g., "CEM Dashboard"), typically adjacent to the logo. |
| navLinks | Array of Objects | A collection of navigation items displayed in the header; each object includes a name, icon, and target route. |
| userName | String | The logged-in user's display name. |
| userRole | String | The role of the currently authenticated user (Admin or Editor), used for conditional rendering of links. |
| logoutLink | String (URL/Route) | The endpoint or route used to log out. |
| searchBar | Object / String (UI) | Configuration and placeholder text for the search field, enabling quick lookup of projects, documents, or recipients. |

### **Search bar** {#search-bar-1}

### **Purpose** {#purpose-1}

* The search bar allows users to type queries and receive **on-the-fly** suggestions (e.g., matching project names or document titles).  
* No separate results page is opened; suggestions appear in a dropdown beneath the input field.

### **UI Behavior** {#ui-behavior}

* **Autocomplete Dropdown:**  
  * As the user types (e.g., each key press), the frontend triggers a debounce (to limit requests) and then sends a query to retrieve matching items.  
  * A list of suggestions appears below the search field, showing a limited set (e.g., top 5\) of relevant matches.  
  * Clicking on a suggestion (or pressing Enter on a highlighted one) navigates the user directly to that item's detail page (if applicable) or fills the input with the chosen suggestion.  
* **Styling & Accessibility:**  
  * Dropdown remains visible until the user clicks away or clears the input.  
  * Keyboard navigation (up/down arrows) cycles through suggestions, pressing Enter selects one.

### 

### **Key Metrics & Stats** {#key-metrics- &-stats}

* **Total Projects:** Displays the number of active projects in the system.  
* **Total Recipients:** Displays the total number of newsletter subscribers across all projects.  
* **Total Documents:** Displays the total number of documents across all projects.  
* **Total Packages:** Displays the total number of scraping packages are configured across all projects.  
* **Newsletters Sent:** Tracks the cumulative number of newsletters delivered.  
* **Newsletter opened:** Tracks Tracks the cumulative number of newsletters opened in mail clients (e.g., Gmail or Outlook).

For the summary dashboard this data will be needed:

| Data Name | Data Type | Data Description |
| :---- | :---- | :---- |
| totalProjects | Number | Total count of active (non-archived) projects in the system |
| totalProjectsIcon | String (URL) | The icon URL used to display the project's icon in the relevant item. |
| totalRecipients | Number | Total number of recipients across all projects |
| totalRecipientsIcom | String (URL) | The icon URL used to display the recipients icon in the relevant item. |
| totalDocuments | Number | Sum of all uploaded files stored for all projects |
| totalDocumentsIcon | String (URL) | The icon URL used to display the documents icon in the relevant item. |
| totalPackages | Number | Count of all configured scraping packages |
| totalPackagesIcon | String (URL) | The icon URL used to display the Packages icon in the relevant item. |
| newslettersSent | Number | Cumulative number of newsletters dispatched to date |
| newslettersSentIcon | String (URL) | The icon URL used to display the newsletters icon in the relevant item. |

### **Recent Projects Section** {#recent-projects-section}

* **Project Cards:** Displays a short list of the most recently updated or most relevant projects, each card showing a brief description, last update timestamp, number of documents, and the next scheduled newsletter.  
* **View All Projects Link:** A button or link that directs to the full Projects list for in-depth management.

The following data is required for the summary dashboard header:

| Data Name | Data Type | Data Description |
| :---- | :---- | :---- |
| sectionTitle | String | The heading displayed above the list of recent projects (e.g., "Recent Projects"). |
| viewAllProjectsButton | String (URL/Route) | The link or route that, when clicked, navigates to the full project list or Projects page (e.g., `/projects`). |

The following data is required for the Recent Projects dashboard card:

| Data Name | Data Type | Data Description |
| :---- | :---- | :---- |
| recentProjectsTitle | String | The heading displayed above the list of recent projects (e.g., "Recent Projects"). |
| viewAllProjectsButton | String (URL/Route) | The link or route that, when clicked, navigates to the full project list or Projects page (e.g., `/projects`). |
| projectId | String | A unique identifier (e.g., UUID) for the project. |
| projectName | String | The project's displayed name/title. |
| description | String | A brief summary of the project's purpose or focus. |
| lastUpdated | Date/DateTime | A timestamp that captures the most recent update to the project. |
| documentCount | Number | The number of documents associated with this project. |
| nextNewsletterDate | Date/DateTime | The scheduled date and/or time for the next newsletter send related to this project, if any. |

### **Recent Activity Feed** {#recent-activity-feed}

* **Activity Log:** Lists real-time updates on new activity of this type:  
  * Project additions, edit or delete  
  * Document uploads or delete.  
  * Recently sent newsletters.  
  * Persona additions, edit or delete.  
  * Scraping package configuration, activated, deactivated, edit or delete.  
* **Timestamp & Detail:** Each entry shows when the activity occurred and any relevant summary (e.g., "New document uploaded to 'Marketing Campaign 2025'").

The following data is required for the Recent Activity header:

| Data Name | Data Type | Data Description |
| :---- | :---- | :---- |
| recentActivityTitle | String | The heading shown above the list of recent activities (e.g., "Recent Activity"). |
| viewAllActivityButton | String (URL/Route) | A link or route that navigates to a more comprehensive activity log or audit trail page. |

The following data is required for the Recent Activity card:

| Data Name | Data Type | Data Description |
| :---- | :---- | :---- |
| activityType | String | The type of system event (e.g., "DocumentUpload," "NewsletterSent," "PersonaModified"). |
| activityTypeIcon | String (URL) | A path or class name for the icon displayed next to the activity (e.g., "icon-upload," "icon-envelope"). |
| projectName | String | The name of the project associated with the event. (If not project-related, this could be null or omitted.) |
| timestamp | Date/DateTime | A date/time indicating when the activity occurred. |
| details | String | A brief description or summary (e.g., "Newsletter sent to 1,234 recipients," "New document uploaded: Q1 Report"). |

## **Projects page** {#projects-page}

### **Purpose** {#purpose-2}

The **Projects Page** serves as an archive and management hub for all projects within the Proton CRM. From this page, authorized users can:

* **View** a list of all existing projects (both active and archived).  
* **Create** new projects.  
* **Edit** or **delete** existing projects.  
* **Activate** or **deactivate** a project.  
* **Access** each project's detailed view (the **Single Project** page).

### **UI Layout & Components** {#ui-layout- &-components}

* **Header & Navigation**  
  * Inherits the main header (logo, nav links, user profile) from the CRM layout.  
  * "Projects" is highlighted or selected in the primary navigation, indicating the current page.  
* **Projects Table / Grid**  
  * Presents each project in either a list or cards mode.  
  * Commonly shown columns/fields: Project Name, Description, Last Updated, Status (e.g., Active/Archived), and a quick action menu (Edit, Activate/deactivate, Archive or View).  
* **Create New Project Button**  
  * A button (e.g., "+ Create Project") that opens a module for creating a new project.  
  * Project creation contains the project's title and subtitle

**Pagination**

* **Display Conditions**  
  * If there are more than 50 projects in **List Mode**, pagination controls appear (e.g., "Page 1 of 5").  
  * If there are more than 25 projects in **Card Mode**, pagination controls appear under the grid.  
* **UI/UX Details**  
  * The pagination bar at the bottom of the project listings shows the current page and has arrows for navigation. The design is responsive, so on smaller screens page numbers might be replaced with a dropdown or Previous/Next buttons.

### **Key Functionalities** {#key-functionalities}

* **List All Projects**  
  * Displays basic project details at a glance.  
  * Allows sorting by date created, name, or last updated.  
* **Create Project**  
  * Opens a form or modal requesting the project's **name** and **description**.  
  * Edits are reflected immediately in the listing and in the single project view.  
* **Archive a Project**  
  * Offers an option to archive or remove a project entirely.  
  * Ensures confirmation dialogs to prevent accidental deletion.  
* **Navigate to Single Project**  
  * Clicking on a project in the list/card directs the user to the **Single Project** page, where they can view documents, manage scraping packages, configure newsletters, etc.  
* **Status Indicators**  
  * Each project can display a label or color-coded badge indicating whether it is active or archived.

### **Data Model & Fields** {#data-model- &-fields}

Below is a **data fields** table for rendering each project in the **Projects Page** list. It includes typical properties you might retrieve from the backend.

| Data Name | Data Type | Data Description | validation |
| :---- | :---- | :---- | :---- |
| ProjectId | String | A unique identifier (e.g., UUID) for the project. | \- **Generated** by the system (no user input). \- Must be unique across all projects. |
| dateCreated | Date/DateTime | When the project was initially created (auto-generated by system). | \- **Generated** by system on creation(no user input). |
| lastUpdated | Date/DateTime | Timestamp for the most recent update to the project's data or settings. | \- **Updated** automatically whenever the project record is modified. |
| status | String (Enum) | Indicates the project's state (e.g., "Active," "Archived") | \- **Generated** by system on creation(no user input). \- The default setting is Active. |
| projectName | String | The project's displayed name/title. | \- **Required** (cannot be empty). \- **Max length**: 100 characters (customizable). \- Must be unique among active projects, if that is a business requirement. |
| description | String | A brief summary of the project's purpose or focus. | \- **Required** (cannot be empty). \- **Max length**: 500 characters. |

### **Error Handling & Validation** {#error-handling- &-validation}

* **Unique Project Names**: The system should be able to detect duplicate names. If the suggested project name is already in use, the system should display an error message: "That project name is already taken. Please choose a different one."   
* **Mandatory Fields**: If the mandatory fields projectName and/or description are not completed, The system will generate an error message that reads "Please fill out this required field.".  
* **Permissions**: Certain roles (e.g., Admin, Editor) may have full access. Others might only create or modify projects

### **Security & Permissions** {#security- &-permissions}

* **Role-Based Access**:  
  * ***Admin*** can see and edit all projects.  
  * ***Editors*** can modify projects they own or are granted access to.  
* **Archived Projects**:  
  * Typically remain visible in the system but flagged as archived.  
  * May not appear in active project listings unless a "Show archived" filter is enabled.

### **Future Enhancements** {#future-enhancements}

* **Bulk Actions**: Archive or delete multiple projects simultaneously.  
* **Advanced Filters**: Filter by date range, owner, or tags.  
* **Analytics**: Include metrics such as open rate or newsletters sent for each project directly in the project list.

## **Single Project page** {#single-project-page}

### **Purpose** {#purpose-3}

The **Single Project Page** provides a detailed overview of one specific project, consolidating key metrics, configuration options, and quick access to related functionalities such as documents, scraping packages, recipients, and newsletter settings. It allows authorized users to **edit project details**, monitor relevant data, and perform project-specific actions.

---

### **UI Layout & Sections** {#ui-layout- &-sections}

* **Header & Project Overview**  
  * **Project Title & Description**: Displays the project name, a short summary, and an edit icon or button for modifying these details.  
  * **Key Metrics**: Quick stats:  
    * number of documents  
    * scheduled date for the next newsletter.  
    * total recipients  
    * Date of last update of these project parameter  
      * Project name  
      * Project description  
      * File uploaded or deleted  
      * Change to projects newsletter setup  
      * Change to projects recipients list  
      * Change to projects persona configuration  
* **Navigation Tabs**  
  * **Documents**: A link or tab to view and manage all uploaded documents for this project.  
  * **Scraping Packages**: A tab where users can see and configure scraping packages unique to this project.  
  * **Newsletter Settings**: A tab to edit newsletter frequency and dispatch timing.  
  * **Personas & Recipients**: A tab to manage personas, assign them to recipients, and add or   
* **Edit Project Modal or Drawer**  
  * Triggered by an "Edit" button within the **Project Overview** section.  
  * Allows updating **project name**, **description**, **status** (active/archived), and possibly advanced fields like tags or metadata.

### **Key Functionalities** {#key-functionalities-1}

* **View & Edit Project Details**  
  * Users can see the project name, description, and key stats at the top of the page.  
  * An "Edit" action lets authorized users update these fields.  
* **Quick Metrics**  
  * **Documents**: Count of how many files are currently uploaded.  
  * **Scraping Packages**: Number of active data-ingestion configurations.  
  * **Recipients**: Number of individuals subscribed under this project.  
  * **Next Newsletter Date**: Scheduled date/time of the next newsletter dispatch.  
* **Navigation to Sub-Pages**  
  * **Documents**: Lists all documents. Users can view, upload, or delete files here.  
  * **Scraping Packages**: Lists all scraping packages linked to this project with controls to toggle active/inactive or configure details.  
  * **Newsletter Settings**: Provides a form to change sending frequency, set AI prompts, and update the next send time.  
  * **Personas & Recipients**: Manages role-based personas and allows assigning them to recipients.  
* **Delete or Archive Project**  
  * An option to archive the entire project.  
  * Archiving a project triggers a confirmation dialogue.

### **Data Model** {#data-model}

| Data Name | Data Type | Data Description |
| :---- | :---- | :---- |
| **projectId** | String | Unique identifier for the project (e.g., UUID). |
| **projectName** | String | Human-readable title (e.g., "Marketing Campaign 2025"). |
| **description** | String | A short summary of the project's scope. |
| **status** | String (Enum) | Indicates if the project is "Active" or "Archived." |
| **dateCreated** | Date/DateTime | Timestamp of when the project was created. |
| **lastUpdated** | Date/DateTime | Most recent timestamp reflecting updates to this project. |
| **documentCount** | Number | Count of documents in this project. |
| **activePackages** | Number | Number of scraping packages currently active for this project. |
| **recipientCount** | Number | Number of recipients assigned to this project. |
| **nextNewsletterDate** | Date/DateTime | Scheduled send date/time for the next newsletter. |

### 

### 

### **Documents tab**

**Purpose:** The Documents section is a file management interface that allows users to upload, download, edit metadata, and delete documents related to the project.

#### **UI Layout & Structure**

The Documents Section is designed as an items repeater, meaning that each document is displayed as a repeating UI component in a list or grid view.

**Each document entry in the repeater includes the following fields:**

| Data Name | Data Type | Data Description |
| :---- | :---- | :---- |
| **documentId** | String | A unique identifier (e.g., UUID) for the project. |
| **documentName** | String | Human-readable title (e.g., "Marketing Campaign 2025 users analysis"). |
| **documentType** | String | File format (e.g., PDF, Word, Excel, CSV, Image) |
| **uploadDate** | Date/DateTime  | Timestamp when the file was uploaded |
| **Download button** | Image | Allows to download the file to the local storage |
| **Delete button** | image | Enables the removal of the file from both the project and the system. |

### 

#### **Functionalities**

**Each document in the items repeater supports the following actions:**

##### Download Documents

* Click the "Download" Button \- The system retrieves the document and downloads it to the user's device.

##### Delete Documents

* Click the "Delete" Button \- Triggers a confirmation dialog to prevent accidental deletions.

##### Upload New Documents

* Upload Button \- Opens a module that contains a file picker for users to upload one file.  
* Drag & Drop Support \- Users can drag and drop files directly into the upload area.  
* File Size Limit \- Restrict uploads to a maximum size of 10 mb


### **Newsletter settings tab**

The **Project Newsletter Tab** in Proton CRM allows users to manage the **newsletter scheduling, dispatch history** and **analytics tracking**.

#### **UI Elements**

The **Newsletter Tab** consists of the following key sections:

1. **Newsletter Scheduling & Frequency** \- Controls for **when and how often** newsletters are sent.  
2. **Scheduled Newsletters** \- Newsletters that have been scheduled along with their corresponding **scheduled times** are displayed in a list.  
3. **Newsletter Archive (Sent Newsletters List)** \- Displays the history of **past newsletters** with key engagement metrics.  
4. **Newsletter Analytics Overview** \- Provides **performance metrics** such as open and click rates.  
5. **Download Reports** \- Allows users to export newsletter analytics.

   ---

#### **Newsletter Scheduling & Frequency**

**Purpose**: Users can configure how often newsletters are sent and set delivery times.

##### UI Elements

**Delivery Frequency Selection** → Users can choose from:

* **Daily**  
* **Weekly**  
* **Monthly**  
* **Custom** (user-defined intervals)  **Time Picker** \- Select the **specific time** the newsletter should be dispatched (e.g., 9:00 AM).  
* **Day of Week Selector** \- Available for **weekly and custom** schedules (e.g., Monday).  
*  **Save Settings Button** \- Saves the user's selections.

##### Data Table

| Field | Type | Description |
| :---- | :---- | :---- |
| **Frequency** | Enum (Daily/Weekly/Monthly/Custom) | How often the newsletter is sent |
| **Send Time** | Time | The time newsletters are dispatched |
| **Day of Week** | Enum (Monday-Sunday) | The specific day for **weekly** or **custom** schedules |
| **Next Scheduled Date** | Date/Time | The next planned newsletter dispatch |

#### **Scheduled newsletters**

The **Scheduled newsletters** will be positioned at the **middle of the Newsletter Tab**, above the **Sent Newsletters** list.

##### UI Elements

* **Next Newsletter Title** \- Displays the **subject line** of the upcoming newsletter.  
*  **Scheduled Send Date & Time** \- Shows when the newsletter will be sent.  
*  **Recipient Count** \- Number of recipients scheduled to receive it.  
* **Preview Newsletter** (Button) \- Opens a **preview modal** of the email content.  
* **Generate Content** (Button) \- **Generates content** with the AI module with the project's scraping module  for each persona.  
*  **Cancel** (Button) \- Allows users to **cancel** the scheduled newsletter.  
*  **Reschedule** (Button) \- Allows users to **change the send date** of the scheduled newsletter.

##### Data Table

#### 

| Field | Type | Description |
| :---- | :---- | ----- |
| **Newsletter ID**	 | UUID | Unique identifier for the newsletter |
| **Subject Line**	 | String | Title of the newsletter email |
| **Scheduled Send Date**	 | Date/Time | Planned send time |
| **Total Recipients**	 | Integer | Count of recipients receiving this newsletter |
| **Status** | Enum (Scheduled/Rescheduled/Canceled) | Status of the newsletter |
| **Actions** | Buttons | Preview  / Edit  / Cancel |

#### 

#### **Sent Newsletters** 

**Purpose**: Displays a **list of previously sent newsletters** with engagement statistics.

##### UI Elements

* **Search Bar** \- Allows users to search for newsletters by **subject line.**  
* **Sent Newsletter List** \- Displays these key details: **sent date, recipient count, open rate, and click rate**.

##### Data Table

| Field | Type | Description |
| :---- | :---- | ----- |
| **Newsletter ID** | UUID | Unique identifier for each newsletter |
| **Subject Line** | String | The email subject line |
| **Sent Date** | Date/Time | When the newsletter was sent |
| **Recipients Count** | Integer | Total number of recipients |
| **Open Rate (%)** | Number | Percentage of recipients who opened the newsletter |
| **Click Rate (%)** | Number | Percentage of recipients who clicked on a link |

#### **Newsletter Analytics Overview**

**Purpose**: Tracks **open rates, click rates, and subscriber trends** to measure campaign effectiveness.

#### **UI Elements**

* **Average Open Rate Display** \- Shows the average open percentage across all newsletters in the project.  
* **Average Click Rate Display** \- Displays the percentage of recipients who clicked a link.  
* **Total Subscribers Counter** \- Displays the total number of **subscribers**.

#### **Data Table**

#### 

| Field | Type | Description |
| :---- | :---- | :---- |
| **Average Open Rate (%)** | Number | The percentage of recipients who opened newsletters by mail client (e.g, Gmail or Outlook) |
| **Average Click Rate (%)** | Number | The percentage of recipients who clicked links |
| **Total Subscribers** | Number | The percentage of recipients who unsubscribed |

#### **Download Reports**

**Purpose**: Users can export newsletter performance reports for further analysis.

##### UI Elements

**Download Report Button** \- Generates a **CSV file** containing newsletter engagement metrics.

###### *Report Includes:*

* **Sent Newsletter List** (with open & click rates)  
* **Subscriber Growth Trends**  
* **Engagement Over Time** (heatmap of when users open emails)  
* **Device & Location Metrics** (if available)

### **Personas & Recipients tab**

The **Personas & Recipients Tab** allows users to manage **recipient lists and persona-based content customization** for a project. It provides tools to assign recipients to personas, adjust AI-driven tone and content settings, and track engagement metrics.

#### **UI Elements**

**Personas Section**

* **Add Persona Button** \- Opens a modal to create a new persona.  
* **Personas List** \- Displays **existing personas** with recipient counts and last modified timestamps.  
* **Edit Persona** (Button) **\-** Opens a persona editing modal.

**Recipients Section**

* **Add Recipients Button** \- Allows users to add new recipients manually or via CSV upload.  
* **Search & Filters** \- Search by **name, email, persona, or status**.  
*  **Recipients List** \- Displays all **assigned recipients**, including their persona classification.

#### **Data Table \- Personas Section**

| Field | Type | Description |
| :---- | :---- | :---- |
| **Persona ID** | UUID | Unique identifier for the persona |
| **Persona Name** | String | Name of the persona (e.g., "Executives") |
| **Recipients Count**	 | Integer | Total number of recipients assigned to this persona |
| **AI Tone Setting** | Array | Defines AI-generated content tone (e.g., Formal/Casual/Custom) |
| **Prompt Adjustments** | String | Custom AI instructions for content generation |
| **Last Modified** | Date/Time | Last update timestamp |
| **Action** | Button | Edit Persona |

#### **Data Table \- בs Section**

| Field | Type | Description |
| :---- | :---- | :---- |
| **Recipient ID** | UUID | Unique identifier for the recipient |
| **Name Name** | String | Full name of the recipient |
| **Email** | String | Recipient's email address |
| **Persona Assigned** | String | The persona linked to the recipient |
| **Status** | Enum (Active/Inactive) | Indicates recipient subscription status |
| **Subscription Date** | Date/Time | When the recipient subscribed |
| **Action** | Button | Edit / / Remove |

### **Security & Permissions** {#security- &-permissions-1}

* **Role-Based Access**:  
  * **Admins**: Full view and edit privileges.  
  * **Editors**: Limited to updating or viewing certain fields if assigned to the project.

### **Validations & Error Handling** {#validations- &-error-handling}

* **Required Fields**: Must have a non-empty project name if editing.  
* **Status Updates**: If archiving a project, confirm that the user has admin privileges or the correct role.  
* **Not Found**: If the project ID is invalid or removed, return a `404 Not Found` response.

### **UI Reference** {#ui-reference}

This page typically appears after clicking a project card or list item from the **Projects Page** or from a **Recent Projects** section on the **Home Page**. The existing wireframes (under "Projects" or "Single Project" references) may detail how each subsection is presented (tabs or expanded sections).

### **Future Enhancements** {#future-enhancements-1}

* **Inline Document Previews**: Quick preview or search within documents from the Single Project interface.  
* **Project-Level Analytics**: Real-time stats on newsletter performance, open/click rates, or user engagement on a dedicated dashboard.  
* **Project Team Management**: Additional assignment of internal team roles to each project.

**Summary**  
The **Single Project Page** centralizes all project-specific information, enabling users to quickly manage the project's details, documents, scraping setups, newsletters, and recipients. Its intuitive layout, combined with direct navigation to deeper configuration tabs, helps streamline the overall management lifecycle for each client or internal initiative.

## **Scraping packages**

### **Purpose**

The **Scraping Packages Archive** page provides a centralized location where users can view all scraping packages in the system (across all projects or globally). Users can create new scraping packages and edit, activate, or deactivate existing ones. This helps maintain an organized repository of automated data ingestion configurations that feed content into Proton CRM.

### **UI Layout & Components**

* **Header & Navigation**

  * Inherits the same main header (logo, navigation, user profile) used throughout Proton CRM.  
  * A "Scraping Packages" link is highlighted or selected in the navigation to indicate the current page.  
* **Scraping Packages Table (or Grid)**

  * Displays each scraping package with basic details: Name, Description, Status (active/inactive), Last Run Time, and Next Scheduled Run (if applicable).  
  * May feature pagination when the total number of packages exceeds a configured threshold (e.g., 25 or 50).  
  * A search bar or filtering tool may appear at the top to find packages by name, status, or relevant keywords.  
* **Create New Package Button**

  * Allows users to create a new scraping package (opens a form or modal).  
  * The user can specify core fields such as name, source URLs, or scraping rules.  
* **Action Buttons (per package)**

  * **Edit** – Opens a configuration form for the selected scraping package.  
  * **Activate/Deactivate** – Toggles the status of the scraping package.  
  * **Delete** – Permanently removes the scraping package from the system (with a confirmation dialog).

### **Key Functionalities**

* **List All Packages:** Show a quick overview of all existing packages, both active and inactive.  
* **Activate/Deactivate:** Toggle a package's ability to run. Deactivated packages do not fetch or ingest new data.  
* **Edit Scraping Package:** Modify any part of the package configuration (e.g., name, data source, rules).  
* **Create New Scraping Package:** Launch a form or modal to define a new package (e.g., define data source URLs, set scheduling).  
* **Delete Scraping Package:** Remove a package entirely (requires confirmation).

### **Data Model & Fields**

Below is an example of possible fields for each scraping package in the archive. (Note that the original document does not detail these fields explicitly; this table follows the style used elsewhere in the specification.)

| Field Name | Type | Description | Validation |
| :---- | :---- | :---- | :---- |
| **packageId** | String (UUID) | A unique identifier for the scraping package. | Auto-generated by the system. |
| **packageName** | String | A user-facing name or title for the scraping package (e.g., "Tech News Scraper"). | Required; must be unique among packages |
| **description** | String | A brief explanation of the package's purpose (e.g., "Scrapes top tech news sites weekly."). | Required |
| **status** | Enum | Active/Inactive, specifying whether the package is currently scraping data or paused. | Default: Active |
| **schedule** | Enum or String | Defines how often the scraping package runs (e.g., daily, weekly, monthly, or cron-like expression). | Required |
| **lastRun** | Date/DateTime | Timestamp of the most recent scraping job completion. | Auto-updated by system |
| **nextRun** | Date/DateTime | Timestamp of the next scheduled scraping job. | Auto-updated by system |
| **createdAt** | Date/DateTime | Timestamp when the package was created. | Auto-generated by system |
| **updatedAt** | Date/DateTime | Timestamp for the most recent modification. | Auto-updated by system |

### **Error Handling & Validation**

* **Unique Package Names:** If a user attempts to create or rename a package with a name that already exists, display an error (e.g., "This package name is already taken.").  
* **Required Fields:** If mandatory fields (such as `packageName` or `description`) are left blank, prompt the user to fill them in before saving.  
* **Confirmation on Delete:** Users must confirm deletion (e.g., "Are you sure you want to delete this package?").

### **Future Enhancements**

* **Bulk Actions:** Ability to activate/deactivate or delete multiple packages at once.  
* **Enhanced Filtering & Tagging:** Filter packages by category or attach tags for easier organization.  
* **Run History Logs:** Show the full log of scraping attempts, including success/failure states, data volumes ingested, etc.

## **Scraping Packages Archive**

### **Purpose**

The **Scraping Packages Archive** page provides a centralized location where users can view all scraping packages in the system (across all projects or globally). Users can create new scraping packages and edit, activate, or deactivate existing ones. This helps maintain an organized repository of automated data ingestion configurations that feed content into Proton CRM.

### **UI Layout & Components**

* **Header & Navigation**

  * Inherits the same main header (logo, navigation, user profile) used throughout Proton CRM.  
  * A "Scraping Packages" link is highlighted or selected in the navigation to indicate the current page.  
* **Scraping Packages Table (or Grid)**

  * Displays each scraping package with basic details: Name, Description, Status (active/inactive), Last Run Time, and Next Scheduled Run (if applicable).  
  * May feature pagination when the total number of packages exceeds a configured threshold (e.g., 25 or 50).  
  * A search bar or filtering tool may appear at the top to find packages by name, status, or relevant keywords.  
* **Create New Package Button**

  * Allows users to create a new scraping package (opens a form or modal).  
  * The user can specify core fields such as name, source URLs, or scraping rules.  
* **Action Buttons (per package)**

  * **Edit** – Opens a configuration form for the selected scraping package.  
  * **Activate/Deactivate** – Toggles the status of the scraping package.  
  * **Delete** – Permanently removes the scraping package from the system (with a confirmation dialog).

### **Key Functionalities**

* **List All Packages:** Show a quick overview of all existing packages, both active and inactive.  
* **Activate/Deactivate:** Toggle a package's ability to run. Deactivated packages do not fetch or ingest new data.  
* **Edit Scraping Package:** Modify any part of the package configuration (e.g., name, data source, rules).  
* **Create New Scraping Package:** Launch a form or modal to define a new package (e.g., define data source URLs, set scheduling).  
* **Delete Scraping Package:** Remove a package entirely (requires confirmation).

### **Data Model & Fields**

Below is an example of possible fields for each scraping package in the archive. (Note that the original document does not detail these fields explicitly; this table follows the style used elsewhere in the specification.)

| Field Name | Type | Description | Validation |
| :---- | :---- | :---- | :---- |
| **packageId** | String (UUID) | A unique identifier for the scraping package. | Auto-generated by the system. |
| **packageName** | String | A user-facing name or title for the scraping package (e.g., "Tech News Scraper"). | Required; must be unique among packages |
| **description** | String | A brief explanation of the package's purpose (e.g., "Scrapes top tech news sites weekly."). | Required |
| **status** | Enum | Active/Inactive, specifying whether the package is currently scraping data or paused. | Default: Active |
| **schedule** | Enum or String | Defines how often the scraping package runs (e.g., daily, weekly, monthly, or cron-like expression). | Required |
| **lastRun** | Date/DateTime | Timestamp of the most recent scraping job completion. | Auto-updated by system |
| **nextRun** | Date/DateTime | Timestamp of the next scheduled scraping job. | Auto-updated by system |
| **createdAt** | Date/DateTime | Timestamp when the package was created. | Auto-generated by system |
| **updatedAt** | Date/DateTime | Timestamp for the most recent modification. | Auto-updated by system |

### 

### **Error Handling & Validation**

* **Unique Package Names:** If a user attempts to create or rename a package with a name that already exists, display an error (e.g., "This package name is already taken.").  
* **Required Fields:** If mandatory fields (such as `packageName` or `description`) are left blank, prompt the user to fill them in before saving.  
* **Confirmation on Delete:** Users must confirm deletion (e.g., "Are you sure you want to delete this package?").

### **Security & Permissions**

* **Role-Based Access:**  
  * **Admins:** Full access to view, create, edit, and delete any package.  
  * **Editors:** May be restricted to read-only or partial edit rights, depending on the organization's policy.  
* **Data Privacy:** If scraping packages involve credentials or private APIs, secure storage and masked display of such credentials is recommended (not shown in plain text).

### **Future Enhancements**

* **Bulk Actions:** Ability to activate/deactivate or delete multiple packages at once.  
* **Enhanced Filtering & Tagging:** Filter packages by category or attach tags for easier organization.  
* **Run History Logs:** Show the full log of scraping attempts, including success/failure states, data volumes ingested, etc.

## 

## **Scraping Package Configuration**

### **Purpose**

The **Scraping Package Configuration** page (or form) is where users specify exactly how a package scrapes data, what sources it uses, which schedule it follows, and any special rules for filtering or parsing the content. While the Archive lists packages, this page handles the detailed setup and maintenance of each package.

### **UI Layout & Components**

* **Header / Page Title**

  * Typically shows the package's name (e.g., "Configure: Tech News Scraper").  
* **Configuration Form Sections**

  * **Basic Info:** Name, description, active/inactive toggle.  
  * **Data Sources URL:** One or more source URLs or API endpoints the scraper targets.  
  * **Document Upload:** Section to upload and manage supplemental files that may aid the scraping logic or store domain data.  
  * **Schedule Settings:** Frequency of the scraping job (daily, weekly, monthly, custom cron).  
  * **Advanced Rules:** Keywords to include/exclude, language filtering, or region-based filters.

**Document Upload & Management**

* **Upload Button:** Allows adding one or more files (e.g., PDF, TXT, CSV) directly to the scraping package configuration.  
* **Document List (Items Repeater):** Displays uploaded files with file name, upload date, and possible actions (Download, Delete).  
* **File Size Limit:** Each document might be restricted to a maximum size (e.g., 10 MB).  
* **Allowed File Types:** (As needed) e.g., PDF, DOCX, CSV, TXT.  
    
* **Actions & Buttons**

  * **Save / Update Configuration** – Saves all form changes.  
  * **Test Run** – (Optional) Manually triggers a single scraping run to validate the config.  
  * **Cancel** – Discards changes and returns to the previous screen (e.g., the archive).

### **Key Functionalities**

* **Set or Edit Name & Description:** Clearly identify the scraping package's purpose.  
* **Set Sources, Endpoint or Document:** Enter or edit one or multiple URLs, possibly with additional credentials if needed (e.g., API keys).  
* **Set Document:** Enter or edit one or multiple documents.  
* **Define Schedule:** Use a dropdown or text-based scheduler (e.g., cron syntax) to determine run intervals.  
* **Add Filter/Parsing Rules:** Indicate which types of content should be extracted or ignored.  
* **Activate/Deactivate the Package:** Toggle whether the package should run automatically.  
* **Manual Test Run (if supported):** Let users immediately try the scraping process to confirm correct setup.

### **Data Model & Fields**

Although each organization might have different data points to store, below is a typical set of fields for a single scraping package's configuration.

| Field Name | Type | Description | Validation |
| :---- | :---- | :---- | :---- |
| **packageId** | String (UUID) | Unique identifier for the scraping package. | Auto-generated, read-only. |
| **packageName** | String | User-facing title or label. | Required, unique among packages. |
| **description** | String | Brief explanation of the package's purpose. | Required. |
| **status** | Enum | Indicates Active / Inactive. | Default: Active. |
| **sourceURLs** | Array of Strings | One or more URLs to be scraped. | Must be valid URLs; at least one required. |
| **uploadedDocuments** | Array of Objects | Files attached for reference or specialized scraping instructions. Each object has at least `documentId`, `documentName`, `uploadDate`. | File size/type limits as defined by admin. |
| **schedule** | String / Enum | Defines frequency (daily, weekly, monthly, custom). Could also be cron-like expression. | Required. |
| **filters** | Object or String | Additional logic or filtering (e.g., only parse articles in English or containing certain keywords). | Optional. |
| **credentials** | Object (secure) | If applicable, API keys or basic auth credentials. Must be stored securely (e.g., encrypted at rest). | Protected, not displayed plainly. |
| **lastRun** | Date/DateTime | When the package last executed. | Auto-updated by system. |
| **nextRun** | Date/DateTime | Next scheduled run (calculated based on schedule). | Auto-updated by system. |
| **createdAt** | Date/DateTime | Creation timestamp. | Auto-generated, read-only. |
| **updatedAt** | Date/DateTime | Timestamp of the most recent configuration change. | Auto-updated by system. |

### **Error Handling & Validation**

* **Required Fields:** `packageName`, `description`, and `sourceURLs` cannot be blank.  
* **URL Validation:** If any `sourceURLs` entry is invalid, display an error message (e.g., "Please provide a valid URL").  
* **Schedule Validation:** If the user enters a custom schedule, ensure it follows the cron format or is recognized by the scheduling system.  
* **Unique Name Check:** If a user attempts to rename the package to a name that already exists, display an error.  
* **Credentials Security:** If credentials are incorrect or missing, provide a distinct warning or error message (e.g., "Invalid API key").

### **Security & Permissions**

* **Audit Logs:** Track changes to schedules, source URLs, or credentials.

### **Future Enhancements**

* **Multiple Source Schedules:** Support different frequencies for different URLs within the same package.  
* **Custom Transformers/Parsers:** Let users define transformations or parsing steps (e.g., using a simple script or JSONPath).  
* **Real-Time Monitoring & Error Reports:** Provide logs or email alerts if a scraping run fails.

## **Conclusion**

This specification document outlines the core functionality, data models, and user experience flows for the Proton CRM system. By consolidating project, persona, and content management within a single interface—and now extending these capabilities with robust scraping, document handling, and newsletter features—Proton aims to streamline the entire client engagement cycle. As the platform evolves, future enhancements and real-world feedback will guide iterative refinements, ensuring Proton remains a flexible, efficient, and scalable solution for content curation and delivery.
</file>

<file path="Proton Backend Specs.md">
# Proton Backend System Specification

## Document Information
- **Project Name**: Proton Backend
- **Document Status**: Draft
- **Last Updated**: March 20, 2025
- **Document Owner**: Engineering Team

## Executive Summary

This document outlines the technical specifications and implementation plan for the Proton backend system. Proton is an AI-powered content curation and delivery system designed to help consulting clients stay informed about relevant market developments after project completion. The backend consists of three core components:

1. **Content Ingestion & Curation (Scraping & Processing)**
2. **Data Storage & Management (Database)**
3. **AI-Powered Content Generation (RAG)**

This specification provides a comprehensive build plan for each component, detailing architecture, technologies, implementation phases, and integration strategies.

## 1. Content Ingestion & Curation (Scraping & Processing)

### Purpose
To collect, process, and prepare content from various sources for storage and AI analysis, ensuring a robust pipeline of relevant and timely information.

### Technical Architecture

#### Components Overview

1. **Scraper Service**
   - Microservice responsible for content extraction from defined sources
   - Configurable per source (web pages, APIs, RSS feeds)
   - Rate-limiting and retry mechanisms
   - IP rotation for avoiding anti-scraping measures

2. **Content Processor Service**
   - Extracts structured data from raw scraped content
   - Performs NLP tasks (entity recognition, keyword extraction, etc.)
   - Generates metadata and classifications

3. **Embedding Generator**
   - Creates vector embeddings for semantic search
   - Processes both text and metadata

4. **Content Ranking Engine**
   - Scores content based on relevance criteria
   - Applies filtering rules

5. **Job Scheduler**
   - Manages the timing and frequency of scraping jobs
   - Handles dependencies between jobs

#### Technology Stack

- **Primary Language**: Python 3.11+
- **Scraping Frameworks**: 
  - Scrapy for structured scraping
  - Selenium for JavaScript-rendered content
  - Beautiful Soup for HTML parsing
  - Newspaper3k for news-specific extraction
- **NLP/Embeddings**: 
  - Hugging Face Transformers
  - Sentence-Transformers for embeddings
  - spaCy for entity extraction and text processing
- **Job Orchestration**: 
  - Airflow for workflow scheduling
  - Celery for task queuing
- **Infrastructure**: 
  - Containerized with Docker
  - Kubernetes for orchestration
  - AWS Lambda for serverless processing tasks

#### Data Flow

1. **Source Configuration**:
   - Each source (URL, API, RSS feed) is registered with metadata
   - Scraping schedule and extraction rules defined

2. **Content Acquisition**:
   - Scheduled jobs fetch content from sources
   - Raw content stored temporarily
   - Provenance and timestamp metadata attached

3. **Processing Pipeline**:
   - Raw content → HTML cleaning → Text extraction
   - Content analysis (NLP) → Entity extraction
   - Classification and tagging

4. **Embedding Generation**:
   - Content text vectorized for semantic search
   - Different embedding models for different content types

5. **Relevance Scoring**:
   - Multiple algorithms applied based on content type
   - Factored scoring system with configurable weights

### Implementation Plan

#### Phase 1: Basic Scraping Infrastructure (Weeks 1-3)

1. **Week 1: Source Configuration Framework**
   - Develop data schema for source configuration
   - Build basic configuration management API
   - Create source validation tools

2. **Week 2: Core Scraper Service**
   - Implement basic scrapers for common patterns
   - Develop HTML content extraction
   - Build rate limiting and retry logic

3. **Week 3: Basic Content Processing**
   - Implement text extraction and cleaning
   - Develop basic metadata generation
   - Create structured output format

#### Phase 2: Advanced Processing & Analysis (Weeks 4-6)

1. **Week 4: NLP Pipeline Integration**
   - Implement entity extraction and NER
   - Develop keyword identification
   - Create sentiment analysis module

2. **Week 5: Embedding Generation**
   - Integrate embedding models
   - Build vector storage interface
   - Develop batch processing for embeddings

3. **Week 6: Content Ranking System**
   - Implement scoring algorithms
   - Develop filtering rules engine
   - Create relevance feedback mechanisms

#### Phase 3: Optimization & Scaling (Weeks 7-8)

1. **Week 7: Scheduler & Orchestration**
   - Implement Airflow DAGs for workflow
   - Develop monitoring and alerting
   - Create failure recovery mechanisms

2. **Week 8: Performance Tuning**
   - Optimize resource usage
   - Implement caching strategies
   - Develop horizontal scaling capabilities

### API Endpoints

```
POST /api/v1/sources
GET /api/v1/sources/{id}
PUT /api/v1/sources/{id}
DELETE /api/v1/sources/{id}

POST /api/v1/sources/{id}/scrape
GET /api/v1/scrape-jobs/{job_id}

GET /api/v1/content
GET /api/v1/content/{id}
GET /api/v1/content/search

POST /api/v1/content/{id}/embeddings
GET /api/v1/content/{id}/embeddings

GET /api/v1/content/ranked?project={project_id}&limit={n}
```

### Monitoring & Logging

- **Metrics Collection**:
  - Scrape success/failure rates
  - Processing time per document
  - Content freshness metrics
  - Embedding generation statistics

- **Logging**:
  - Structured JSON logs
  - Error classification
  - Source-specific logging
  - Performance metrics

### Testing Strategy

- **Unit Tests**:
  - Individual scraper components
  - Processing functions
  - Ranking algorithms

- **Integration Tests**:
  - End-to-end pipeline tests
  - Source configuration to content storage

- **Performance Tests**:
  - Scraping rate limits
  - Processing throughput
  - Database load testing

## 2. Data Storage & Management (Database)

### Purpose
To store and organize all data in a way that supports efficient retrieval, ranking, and AI generation, ensuring scalability, performance, and data integrity.

### Technical Architecture

#### Database Schema

1. **Projects Table**
   - Primary information about client projects
   - Maps to frontend project management UI

2. **Sources Table**
   - Information about content sources
   - Configuration for scraping
   - Relationship to projects

3. **Content Table**
   - Core content storage
   - Metadata and extracted text
   - Relationships to sources and projects

4. **Embeddings Table/Collection**
   - Vector embeddings for content
   - Optimized for similarity search

5. **Personas Table**
   - Information about different user roles/personas
   - Preferences and customization

6. **Recipients Table**
   - End users receiving newsletters
   - Preferences and subscription settings

7. **Newsletters Table**
   - Generated newsletter content
   - Delivery metadata
   - Performance metrics

8. **Documents Table**
   - Uploaded document storage
   - Metadata and extracted content
   - Vector embeddings

#### Technology Stack

- **Primary Database**: 
  - MongoDB for primary document storage
  - Collections for projects, content, sources, and settings

- **Vector Database**:
  - Pinecone for vector search
  - Alternatively: MongoDB Atlas Vector Search

- **Caching Layer**:
  - Redis for high-performance caching
  - Content metadata and frequent queries

- **File Storage**:
  - AWS S3 for document storage
  - Optimized for large file retrieval

- **Search Index**:
  - Elasticsearch for full-text search capabilities
  - Custom analyzers for content-specific search

#### Data Access Patterns

1. **Content Retrieval Flows**:
   - By relevance score (ranked retrieval)
   - By semantic similarity (vector search)
   - By keyword or entity (text search)
   - By recency or source

2. **Write Patterns**:
   - Batch inserts from scrapers
   - Streaming updates for real-time sources
   - Periodic embedding updates

3. **Caching Strategy**:
   - Newsletter templates
   - Frequent queries
   - Recently used content
   - Project configuration

### Implementation Plan

#### Phase 1: Core Schema & Initial Implementation (Weeks 1-3)

1. **Week 1: Schema Design**
   - Finalize database schema
   - Design indexing strategy
   - Create migration scripts

2. **Week 2: Primary Database Setup**
   - MongoDB cluster deployment
   - Implement data models
   - Set up basic CRUD operations

3. **Week 3: File Storage Integration**
   - S3 bucket configuration
   - Document upload/download APIs
   - Content extraction from documents

#### Phase 2: Vector Search & Advanced Features (Weeks 4-6)

1. **Week 4: Vector Database Integration**
   - Deploy Pinecone instance
   - Implement vector storage API
   - Test similarity search performance

2. **Week 5: Search Capabilities**
   - Elasticsearch deployment
   - Index configuration
   - Query API development

3. **Week 6: Caching Implementation**
   - Redis cluster setup
   - Cache population logic
   - Cache invalidation strategies

#### Phase 3: Optimization & Scaling (Weeks 7-8)

1. **Week 7: Performance Tuning**
   - Index optimization
   - Query performance analysis
   - Data access pattern optimization

2. **Week 8: Data Lifecycle Management**
   - Implement data retention policies
   - Create archiving procedures
   - Develop backup and recovery processes

### API Endpoints

```
# Project APIs
POST /api/v1/projects
GET /api/v1/projects/{id}
PUT /api/v1/projects/{id}
DELETE /api/v1/projects/{id}

# Content APIs
GET /api/v1/content?project={project_id}&limit={n}&offset={o}
GET /api/v1/content/{id}
PUT /api/v1/content/{id}
DELETE /api/v1/content/{id}

# Vector Search APIs
POST /api/v1/vector-search
    {
      "query_vector": [...],
      "top_k": 10,
      "filter": {...}
    }

# Document Management APIs
POST /api/v1/documents
GET /api/v1/documents/{id}
DELETE /api/v1/documents/{id}
GET /api/v1/documents/{id}/content

# User & Persona APIs
POST /api/v1/personas
GET /api/v1/personas/{id}
PUT /api/v1/personas/{id}

# Newsletter Data APIs
GET /api/v1/newsletters
GET /api/v1/newsletters/{id}
POST /api/v1/newsletters
```

### Database Maintenance

- **Indexing Strategy**:
  - Text indices for content search
  - Compound indices for frequent queries
  - TTL indices for automatic data expiration

- **Backup Procedures**:
  - Daily snapshots
  - Point-in-time recovery capability
  - Cross-region replication

- **Monitoring**:
  - Query performance tracking
  - Storage utilization metrics
  - Index effectiveness analysis

## 3. AI-Powered Content Generation (RAG)

### Purpose
To generate personalized newsletters by combining relevant content from various sources, guided by user prompts and AI models, using a Retrieval-Augmented Generation (RAG) approach.

### Technical Architecture

#### Components Overview

1. **Content Retriever**
   - Responsible for finding relevant content based on queries
   - Utilizes vector search and keyword matching
   - Filters based on project, persona, and preferences

2. **RAG Orchestrator**
   - Manages the overall generation process
   - Handles prompt construction and context building
   - Monitors generation quality

3. **LLM Integration Service**
   - Interfaces with underlying language models
   - Manages API calls and rate limiting
   - Handles fallbacks and error recovery

4. **Content Formatter**
   - Structures generated content into newsletter format
   - Applies templates and styling
   - Ensures proper citation and attribution

5. **Analytics Engine**
   - Tracks newsletter performance
   - Captures feedback for model improvement
   - Generates insights for future optimization

#### Technology Stack

- **Primary Language**: Python 3.11+
- **LLM Integration**:
  - Anthropic Claude 3.5 Sonnet as primary LLM
  - Potentially Claude 3 Opus for higher-quality needs
  - LangChain for orchestration
- **Vector Search**:
  - Integration with Pinecone or MongoDB Atlas
  - Custom similarity scoring
- **Content Formatting**:
  - Jinja2 templates for newsletter structure
  - Markdown → HTML conversion
- **API Layer**:
  - FastAPI for high-performance endpoints
  - Async processing for concurrent generations
- **Infrastructure**:
  - Containerized with Docker
  - Kubernetes for orchestration
  - GPU acceleration for local LLM (if applicable)

#### RAG Pipeline Flow

1. **Query Construction**:
   - Parse generation request
   - Extract project parameters and constraints
   - Build prompt with instructions and context

2. **Context Retrieval**:
   - Vector search for semantically relevant content
   - Keyword search for specific topics
   - Document search for project-specific content
   - Recent content prioritization

3. **Content Curation**:
   - Re-rank retrieved content
   - Filter for quality and relevance
   - Deduplicate similar content
   - Balance content types and sources

4. **Generation Process**:
   - Construct system prompt with instructions
   - Build user prompt with retrieved content
   - Call LLM with appropriate parameters
   - Process and validate generation

5. **Post-Processing**:
   - Apply formatting to generated text
   - Add citations and references
   - Insert images and links
   - Apply template styling

### Implementation Plan

#### Phase 1: RAG Foundation (Weeks 1-3)

1. **Week 1: Retrieval Mechanisms**
   - Implement vector search integration
   - Develop keyword-based retrieval
   - Create content filtering

2. **Week 2: LLM Integration**
   - Set up Anthropic API connectivity
   - Implement prompt engineering system
   - Create error handling and retries

3. **Week 3: Basic RAG Pipeline**
   - Develop end-to-end RAG flow
   - Implement content chunking
   - Create basic prompt templates

#### Phase 2: Advanced Generation & Formatting (Weeks 4-6)

1. **Week 4: Enhanced RAG Techniques**
   - Implement multi-stage generation
   - Develop self-critique and refinement
   - Create content diversity mechanisms

2. **Week 5: Newsletter Formatting**
   - Build template system
   - Implement citation generation
   - Develop HTML email formatting

3. **Week 6: Persona-Specific Generation**
   - Implement tone and style adaptation
   - Create persona-specific retrieval
   - Develop content preferences system

#### Phase 3: Analytics & Optimization (Weeks 7-8)

1. **Week 7: Performance Analytics**
   - Implement tracking for generated content
   - Create feedback collection mechanisms
   - Develop performance dashboards

2. **Week 8: Generation Optimization**
   - Tune generation parameters
   - Optimize context retrieval
   - Implement A/B testing framework

### API Endpoints

```
# RAG Generation APIs
POST /api/v1/generate/newsletter
    {
      "project_id": "...",
      "persona_id": "...",
      "focus_topics": [...],
      "excluded_topics": [...],
      "time_range": {...},
      "format_preferences": {...}
    }

GET /api/v1/generation/{id}/status
GET /api/v1/generation/{id}/result

# RAG Configuration APIs
POST /api/v1/rag/templates
GET /api/v1/rag/templates/{id}
PUT /api/v1/rag/templates/{id}

# Analytics APIs
GET /api/v1/analytics/newsletter/{id}
GET /api/v1/analytics/performance?timeframe={period}
```

### Prompt Engineering

- **System Prompts**:
  - Clear instructions for newsletter generation
  - Tone and style guidance
  - Citation and attribution requirements

- **User Prompts**:
  - Structured context from retrieved content
  - Specific generation instructions
  - Project and persona context

- **Example Template**:
```
{system_prompt}
You are generating a newsletter for {project_name} with focus on {focus_topics}.
Use a {tone} writing style appropriate for {persona_name}.
Always cite your sources for specific facts or quotes.
Structure the newsletter with: 1) an introduction, 2) {num_sections} key topic sections, 3) a brief conclusion.

{user_prompt}
Here is the context from relevant articles and documents:
{retrieved_content}

Based on this information, generate a newsletter focused on {focus_topics} that would be valuable for {target_audience}.
{additional_instructions}
```

### Performance & Monitoring

- **Generation Metrics**:
  - End-to-end latency
  - Retrieval coverage
  - LLM token usage
  - Error rates

- **Quality Metrics**:
  - Content relevance scores
  - Source diversity
  - Information accuracy audits
  - User feedback analysis

## Integration & Dependencies

### Component Interactions

1. **Content Ingestion → Data Storage**:
   - Scraped content flows into database
   - Embeddings stored in vector database
   - Content metadata indexed for search

2. **Data Storage → Content Generation**:
   - Content retrieved for RAG process
   - Project configuration guides retrieval
   - Persona preferences influence selection

3. **Content Generation → Performance Analytics**:
   - Generated newsletters tracked
   - User interactions recorded
   - Feedback loops to improve future generations

### Shared Libraries & Utilities

1. **Authentication & Authorization**:
   - Consistent access control across all components
   - Role-based permissions aligned with frontend

2. **Logging & Monitoring**:
   - Standardized logging format
   - Centralized log collection
   - Common alerting thresholds

3. **Error Handling**:
   - Consistent error codes
   - Standardized error responses
   - Cross-component retry policies

### External Dependencies

1. **Anthropic Claude API**:
   - Used for newsletter generation
   - Rate limits and costs to monitor
   - Fallback strategy for API outages

2. **AWS Services**:
   - S3 for document storage
   - SQS for job queuing
   - CloudWatch for monitoring

3. **Third-Party Services**:
   - Email delivery service for newsletters
   - Analytics platform integration
   - Potentially OpenAI API as LLM fallback

## Deployment & Operations

### Environment Strategy

1. **Development Environment**:
   - Local Docker Compose setup
   - Mocked external services
   - Test databases

2. **Staging Environment**:
   - Kubernetes cluster with limited resources
   - Integration with test APIs
   - Full pipeline validation

3. **Production Environment**:
   - Highly available Kubernetes cluster
   - Autoscaling configuration
   - Production database clusters
   - Full monitoring and alerting

### CI/CD Pipeline

1. **Build Process**:
   - GitHub Actions for automated builds
   - Container image creation
   - Automated testing

2. **Deployment Process**:
   - ArgoCD for Kubernetes deployments
   - Blue/green deployment strategy
   - Automated rollbacks

3. **Monitoring & Alerting**:
   - Prometheus for metrics collection
   - Grafana for dashboards
   - PagerDuty integration for alerts

### Scaling Strategy

1. **Horizontal Scaling**:
   - Kubernetes pod autoscaling
   - Database read replicas
   - Cache distribution

2. **Load Balancing**:
   - API gateway for request distribution
   - Content generation load balancing
   - Database query distribution

3. **Resource Optimization**:
   - Efficient content caching
   - Scheduled vs. on-demand processing
   - Asynchronous task processing

## Timeline & Milestones

### Project Schedule

1. **Month 1: Foundation**
   - Week 1-2: Database schema implementation
   - Week 2-3: Basic scraper service
   - Week 3-4: Initial RAG pipeline

2. **Month 2: Core Functionality**
   - Week 5-6: Advanced content processing
   - Week 6-7: Vector search integration
   - Week 7-8: Newsletter generation

3. **Month 3: Integration & Optimization**
   - Week 9-10: Frontend integration
   - Week 10-11: Performance optimization
   - Week 11-12: End-to-end testing and validation

### Key Milestones

1. **Milestone 1: Content Pipeline (End of Week 4)**
   - Basic scraping operational
   - Content storage implemented
   - Initial processing pipeline functional

2. **Milestone 2: RAG Generation (End of Week 8)**
   - Content retrieval operational
   - Basic newsletter generation working
   - Template system implemented

3. **Milestone 3: Production Readiness (End of Week 12)**
   - Full pipeline integrated
   - Performance metrics met
   - Documentation completed
   - Deployment automation finished

## Risk Assessment & Mitigation

### Technical Risks

1. **LLM API Reliability**:
   - **Risk**: Anthropic API outages or rate limit issues
   - **Mitigation**: Implement fallback models and queuing system

2. **Scraping Challenges**:
   - **Risk**: Anti-scraping measures on target sites
   - **Mitigation**: Rotate IPs, implement backoff, use multiple techniques

3. **Data Volume Management**:
   - **Risk**: Excessive storage needs for content and embeddings
   - **Mitigation**: Implement data retention policies, optimize storage

### Project Risks

1. **Integration Complexity**:
   - **Risk**: Difficulty integrating all components
   - **Mitigation**: Clear interfaces, thorough testing, phased integration

2. **Performance Bottlenecks**:
   - **Risk**: Slow newsletter generation
   - **Mitigation**: Optimize retrieval, cache common queries, pre-generate content

3. **Content Quality Issues**:
   - **Risk**: Poor quality or irrelevant content in newsletters
   - **Mitigation**: Implement content filters, quality scoring, human review options

## Conclusion

This backend specification outlines the comprehensive plan for implementing the Proton system's server-side components. The three core components—Content Ingestion & Curation, Data Storage & Management, and AI-Powered Content Generation—work together to create a robust platform for delivering personalized, AI-generated newsletters.

The phased implementation approach allows for incremental development and testing, with clear milestones and dependencies. By following this specification, the development team can build a scalable, maintainable, and high-performance backend system that meets the requirements of the Proton project.

## Appendices

### A. API Reference

Detailed API documentation for all endpoints, including:
- Request/response formats
- Authentication requirements
- Error codes and handling
- Rate limits

### B. Database Schema Details

Complete database schema with:
- Collection/table definitions
- Field types and constraints
- Index specifications
- Relationship diagrams

### C. Environment Configuration

Configuration templates for:
- Development environment
- Staging environment
- Production environment
- CI/CD pipeline
</file>

<file path="Proton Product Req.md">
Proton Product Requirements

| DATE | `02.17.25` |  |  |
| :---- | :---- | :---- | :---- |
| PREPARED BY | **Gal Shaya** Associate Director, Tech   | **Peter Pawlick**Principal, Head of Experience | **Liam Forland** Strategist, Experience                 |
|  |  |  |  |
|  |  |  |  |

# 

\-+

## Document Information

* **Product Name**: Proton  
* **Document Status**: Draft  
* **Last Updated**: January 2025  
* **Document Owners**: XP Team 

## Executive Summary

Proton is an AI-powered content curation and delivery system designed to help consulting clients stay informed about relevant market developments after project completion. By extending Proton with a robust CRM-style frontend, internal users can manage project-specific content, customize newsletter delivery, and define role-based experiences seamlessly. This structure supports organization- or project-based management (e.g., Advent Health, Mastercard, Samsung), enabling granular control over documents, scraping packages, newsletter settings, and personalized recipient assignments.

## Problem Statement

### Current Situation

Post-project engagement with consulting clients typically ends abruptly, missing opportunities for continued value delivery and relationship building.

### Problem Definition

Clients need ongoing support to:

* Stay updated on relevant market developments  
* Understand the implications of industry changes  
* Maintain momentum from consulting engagement  
* Access insights relevant to their specific context

  ## Product Overview

  ### **Core Product Capabilities**

1. **Content Sourcing & Management**  
   * **Document Upload:**  
     Users can upload static data (e.g., PDFs, DOCX files) to the client Proton database, adding contextual depth for enhanced content curation.  
   * **Scraping Package Management:**  
     Users can choose and configure specific scraping packages to tailor content ingestion from diverse sources.  
   * **Content Package Management System:**  
     Organizes ingested content for efficient processing and subsequent analysis.  
2. **AI-Powered Analysis**  
   * **RAG (Retrieval Augmented Generation) System:**  
     Integrates AI to enhance content generation.  
   * **Context-Aware Curation:**  
     Analyzes both static documents and dynamically sourced content.  
   * **Semantic Search Capabilities:**  
     Enables efficient and targeted content retrieval.  
3. **Content Delivery**  
   * **Automated Email Newsletter System:**  
     Delivers personalized newsletters directly to clients.  
   * **Web-Based Content Management Interface:**  
     Offers real-time previews and editing capabilities.  
   * **Customizable Delivery Schedules & Templates:**  
     Empowers users to control timing, tone, and formatting of newsletters.  
4. **Enhanced CRM & User Management (New Frontend Capabilities)**  
   * **Project-Based Hierarchy:**  
     Internal users manage multiple projects (e.g., Advent Health, Mastercard, Samsung). Each project encapsulates its own documents, scraping packages, and newsletter settings.  
   * **Document Management:**  
     A dedicated interface for uploading, previewing, and managing documents within each project.  
   * **Scraping Package Configuration:**  
     A dashboard module to enable/disable and configure various scraping packages.  
   * **Newsletter Scheduling & Settings:**  
     A user-friendly control panel to set and adjust global newsletter settings (frequency, AI prompt configurations, content focus).  
   * **Role-Based Persona Management:**  
     * Every project comes with a default “General Persona” for baseline newsletter delivery.  
     * Users can add and customize additional personas—duplicating the default—adjusting tone, content filters, or other parameters.  
     * Recipients can then be assigned a persona via a dropdown selection to ensure tailored communication.

   ---

   ## Target Users

* **External Users:**  
  * Client stakeholders from previous consulting engagements  
  * New business contacts requiring industry insights  
* **Internal Users:**  
  * Proton team members managing client relationships  
* **Extended CRM Users:**  
  * Administrators and project managers using role-based persona definitions  
  * End users who require personalized content adjustments based on their role within the organization

  ---

  ## Technical Requirements

  ### **System Architecture**

**Frontend (Angular-based CRM Management Interface):**

* **Dashboard & Navigation:**  
  * **Project Dashboard:** Displays a list of projects (e.g., Advent Health, Mastercard, Samsung) with summary metrics (newsletter performance, document uploads, active scraping packages).  
  * **Navigation Tabs:** Within each project, tabs include: Dashboard, Documents, Content Packages, Newsletter Settings, Newsletter Personas & Recipients, and Analytics.  
* **Key Functionalities:**  
  * **Document Upload Module:**  
    Allows users to upload static files via drag-and-drop or file selection, with options for file preview and metadata entry.  
  * **Scraping Package Selection:**  
    Interactive controls (toggles, checklists, parameter forms) to enable/disable and configure scraping packages.  
  * **Newsletter Scheduling & Settings:**  
    A calendar/scheduler interface for selecting frequencies (daily, weekly, monthly, custom) and setting preferred dispatch times. Adjustments to global AI prompts and content focus are previewed in real time.  
  * **Persona & Recipient Management:**  
    Interface for viewing the default “General Persona,” adding new personas (via duplication with customization options), and assigning each recipient a preferred persona using dropdown menus.  
  * **Responsive Design:**  
    Optimized for both desktop and mobile devices.

**Backend:**

* **API:**  
  Python-based API to handle requests from the frontend.  
* **Database:**  
  MongoDB with vector embeddings for content and document management.  
* **Integrations:**  
  Secure file uploads, real-time notifications, email delivery system, document parsing, and AI analysis engines.

  ### **Integration Requirements:**

* Secure storage and transmission of documents.  
* Real-time status updates via Angular.  
* API endpoints to support configuration, scheduling, and personalized content adjustments.  
  ---

  ## Frontend User Journeys

  ### **1\. Project Navigation & Overview**

* **Step 1:**  
  The internal user logs in and lands on the central dashboard, which displays a list of projects (e.g., Advent Health, Mastercard, Samsung).  
* **Step 2:**  
  The user selects a project card (e.g., "Advent Health") to view detailed project information and management options.  
* **Step 3:**  
  A sidebar within the project view provides navigation to key modules: Documents, Scraping Packages, Newsletter Settings, and Newsletter Personas & Recipients.

  ### **2\. Document Upload Journey**

* **Step 1:**  
  Within a selected project, the user navigates to the "Documents" tab.  
* **Step 2:**  
  The user clicks “Upload New Document,” selecting a file from their device.  
* **Step 3:**  
  The user enters associated metadata (title, description, tags) to contextualize the document.  
* **Step 4:**  
  The document is uploaded to the project’s Proton database and indexed for context.  
* **Step 5:**  
  Confirmation is provided, and the document appears in the document library with options for previewing and editing.

  ### **3\. Scraping Package Selection Journey**

* **Step 1:**  
  The user accesses the "Content Packages" section within the selected project.  
* **Step 2:**  
  A list of available scraping packages is displayed with brief descriptions.  
* **Step 3:**  
  The user selects desired packages (via checkboxes or toggle switches) and configures any necessary parameters.  
* **Step 4:**  
  Changes are saved, and the system updates the project's content ingestion settings accordingly.

  ### **4\. Newsletter Settings Journey**

* **Step 1:**  
  The user navigates to the "Newsletter Settings" tab within the project.  
* **Step 2:**  
  Global newsletter settings are displayed, including frequency, AI prompt configurations, and content focus.  
* **Step 3:**  
  The user adjusts the settings using a calendar/scheduler interface and real-time preview features.  
* **Step 4:**  
  Upon saving, the updated settings are applied to future newsletter generation for the project.

  ### **5\. Newsletter Persona & Recipient Management Journey**

* **Step 1:**  
  The user selects the "Newsletter Personas & Recipients" tab within the project.  
* **Step 2:**  
  The default “General Persona” is displayed automatically as the baseline template.  
* **Step 3:**  
  The user may click “Add Persona” to duplicate the default, then customize parameters such as tone, content filters, and formatting.  
* **Step 4:**  
  In the recipients list, a dropdown menu next to each recipient allows the user to select which newsletter persona (default or custom) they will receive.  
* **Step 5:**  
  The system saves the personalized settings and applies these adjustments to subsequent newsletter distributions.  
  ---

  ## Success Metrics

  ### **Key Performance Indicators**

* **User Engagement:**  
  * Newsletter open rates  
  * Click-through rates  
  * Client feedback ratings  
* **Content Quality:**  
  * Relevance scores  
  * Client-reported insight value  
  * Content freshness  
* **Operational Efficiency:**  
  * Reduction in newsletter production time  
  * Improved content processing accuracy  
  * Lower configuration error rates

  ---

  ## Development Milestones

  ### **Phase 1: Core Infrastructure**

* Set up MongoDB with vector embeddings  
* Implement basic API structure  
* Develop the content scraping system  
* Create the foundational frontend framework

  ### **Phase 2: AI Integration**

* Implement the RAG system  
* Develop newsletter generation logic  
* Create content curation algorithms  
* Set up vector search capabilities

  ### **Phase 3: Delivery System**

* Build the email delivery system  
* Develop the web-based content management interface  
* Implement user controls and settings  
* Create monitoring and analytics modules

  ### **Phase 4: Enhanced CRM Frontend & User Journeys**

* **Project-Based Navigation:**  
  Develop the central project dashboard and detailed project views.  
* **Document Management Module:**  
  Build UI components for file uploads, metadata entry, and preview functionalities.  
* **Scraping Package Configuration Interface:**  
  Create interactive dashboards for package selection and configuration.  
* **Newsletter Scheduling & Settings:**  
  Integrate calendar-based scheduling with real-time previews.  
* **Persona & Recipient Management Module:**  
  Develop features for managing the default “General Persona,” adding customized personas, and assigning recipients via dropdown.  
* **User Experience Enhancements:**  
  Implement responsive design, error handling, and real-time notifications to ensure a seamless user journey.  
  ---

  ## Constraints & Limitations

* **Data Privacy & Security:**  
  All operations must ensure secure transmission and storage of client data.  
* **Minimal Manual Intervention:**  
  Automation should reduce the need for human oversight in content curation, document processing, and newsletter scheduling.  
* **Compliance:**  
  Content must be properly attributed and adhere to copyright regulations.  
* **Performance:**  
  Enhancements must not adversely impact system responsiveness or existing operational processes.  
  ---


  
---
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/proton logo.svg">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="100%" viewBox="0 0 1582 530" enable-background="new 0 0 1582 530" xml:space="preserve">
<path fill="#000000" opacity="1.000000" stroke="none" 
	d="
M1140.000000,531.000000 
	C760.044861,531.000000 380.589661,531.000000 1.067249,531.000000 
	C1.067249,354.399048 1.067249,177.798080 1.067249,1.098555 
	C528.333313,1.098555 1055.666626,1.098555 1582.973389,1.098555 
	C1582.973389,177.743958 1582.973389,354.371979 1582.973389,531.000000 
	C1435.464478,531.000000 1287.982178,531.000000 1140.000000,531.000000 
M628.342651,350.135071 
	C646.526978,357.104584 665.140015,358.554016 684.294189,355.019379 
	C736.692932,345.349762 773.969543,291.973969 764.663696,239.712006 
	C754.518372,182.735535 703.684082,146.707581 646.552124,156.002258 
	C593.453064,164.640823 555.166687,218.502045 564.652710,271.420319 
	C571.381042,308.954132 592.647949,334.954803 628.342651,350.135071 
M216.261536,341.211365 
	C237.763107,354.560394 261.100037,359.764984 286.064728,355.667664 
	C342.280975,346.441223 379.026306,295.065033 370.113892,238.715988 
	C359.977600,174.629150 289.420746,136.071869 230.368927,162.736008 
	C193.534592,179.368088 172.452911,208.394974 169.525833,248.586014 
	C166.671432,287.779297 183.224335,318.607574 216.261536,341.211365 
M1015.017517,164.486450 
	C973.748657,185.140900 950.922852,229.791519 959.331543,273.416443 
	C970.224915,329.932129 1022.392151,365.484833 1078.972290,354.953217 
	C1132.640015,344.963745 1169.659302,289.861237 1158.531738,236.530701 
	C1144.821899,170.824478 1077.188843,136.549423 1015.017517,164.486450 
M1387.699341,223.500153 
	C1387.699341,202.840561 1387.575806,182.179611 1387.800537,161.522461 
	C1387.847046,157.237946 1386.477539,156.259094 1382.431396,156.305161 
	C1369.113892,156.456802 1355.791626,156.121384 1342.471436,156.136124 
	C1298.828247,156.184448 1255.184937,156.302246 1211.541748,156.411057 
	C1210.423584,156.413849 1209.305908,156.621170 1208.135986,156.738297 
	C1208.080933,157.988937 1207.998901,158.982071 1207.998779,159.975220 
	C1207.992676,220.454422 1207.987427,280.933624 1208.019653,341.412811 
	C1208.020630,343.390442 1208.167114,345.430359 1208.660645,347.333618 
	C1210.085938,352.830170 1214.394409,356.152893 1219.822388,356.216766 
	C1228.299561,356.316498 1232.755859,351.338928 1232.758301,341.639404 
	C1232.771606,289.990509 1232.764771,238.341599 1232.764893,186.692703 
	C1232.764893,184.916901 1232.764893,183.141113 1232.764893,181.322922 
	C1276.424194,181.322922 1319.628296,181.322922 1362.993408,181.322922 
	C1362.993408,183.455353 1362.993286,185.274704 1362.993286,187.094070 
	C1362.993286,238.409744 1362.978149,289.725464 1363.037720,341.041046 
	C1363.040771,343.661255 1363.275269,346.422974 1364.120361,348.870728 
	C1365.848022,353.874359 1371.044312,356.828369 1376.395630,356.383423 
	C1381.652466,355.946350 1385.888550,352.532135 1387.079590,347.390900 
	C1387.597900,345.152893 1387.673096,342.774902 1387.675171,340.460236 
	C1387.708984,301.806915 1387.699341,263.153534 1387.699341,223.500153 
M816.565796,350.963226 
	C824.061829,350.977936 831.557800,351.003876 839.053833,351.005310 
	C862.875732,351.009949 886.697693,351.038727 910.519470,350.984680 
	C917.948792,350.967804 923.249390,346.127594 923.585693,339.337219 
	C923.948486,332.012512 918.412720,326.675171 910.085754,326.647095 
	C888.596313,326.574615 867.106384,326.621826 845.616699,326.621307 
	C843.836487,326.621246 842.056274,326.621277 840.022583,326.621277 
	C840.022583,324.211243 840.022583,322.392670 840.022583,320.574127 
	C840.022583,248.608658 840.023193,176.643188 840.021912,104.677719 
	C840.021667,94.070595 835.527039,88.156082 827.607178,88.325417 
	C819.782654,88.492706 815.584595,94.159309 815.584412,104.570717 
	C815.583130,173.704224 815.577148,242.837723 815.589783,311.971222 
	C815.592163,324.796051 815.672302,337.620911 816.565796,350.963226 
M427.413025,356.947266 
	C436.014130,355.442322 439.207184,351.608917 439.209869,342.570923 
	C439.225281,290.594452 439.217377,238.617996 439.217407,186.641541 
	C439.217407,184.866592 439.217438,183.091660 439.217438,181.003647 
	C460.068146,181.003647 480.366089,181.004257 500.664062,181.003357 
	C509.160187,181.002991 517.658386,181.112640 526.151733,180.956863 
	C531.662415,180.855804 535.803223,178.113647 537.702393,172.937363 
	C539.429016,168.231583 538.895447,163.186249 534.748657,160.201340 
	C531.753479,158.045380 527.529297,156.589676 523.839966,156.561661 
	C488.857849,156.295898 453.872864,156.399643 418.888702,156.416718 
	C417.627258,156.417328 416.365936,156.621597 415.072479,156.733734 
	C414.985931,157.758713 414.882080,158.414886 414.881989,159.071075 
	C414.874451,220.709839 414.858093,282.348602 414.896271,343.987366 
	C414.900940,351.525574 418.608826,355.472534 427.413025,356.947266 
M189.365479,430.953796 
	C193.188736,428.068176 194.171524,424.066162 194.158707,419.505920 
	C194.098358,398.028839 194.136658,376.551483 194.118698,355.074249 
	C194.117783,353.980438 193.921616,352.886749 193.817230,351.801910 
	C185.378952,351.801910 177.297379,351.801910 169.001236,351.801910 
	C169.001236,375.222473 168.800034,398.359100 169.094360,421.489441 
	C169.222748,431.578705 179.197433,436.346985 189.365479,430.953796 
M898.436646,181.250183 
	C902.094360,181.221603 905.757751,181.312820 909.408447,181.137817 
	C915.680298,180.837158 920.547791,175.683578 920.704834,169.375198 
	C920.857239,163.254959 915.994507,157.178024 909.919617,157.085831 
	C892.616760,156.823273 875.307312,156.993652 857.776489,156.993652 
	C857.776489,165.111679 857.776489,172.997314 857.776489,181.250137 
	C871.195435,181.250137 884.324890,181.250137 898.436646,181.250183 
z"/>
<path fill="#FCFCFC" opacity="1.000000" stroke="none" 
	d="
M627.972290,350.025696 
	C592.647949,334.954803 571.381042,308.954132 564.652710,271.420319 
	C555.166687,218.502045 593.453064,164.640823 646.552124,156.002258 
	C703.684082,146.707581 754.518372,182.735535 764.663696,239.712006 
	C773.969543,291.973969 736.692932,345.349762 684.294189,355.019379 
	C665.140015,358.554016 646.526978,357.104584 627.972290,350.025696 
M732.214905,221.362778 
	C717.537903,193.228790 687.985168,176.635040 657.250916,180.284256 
	C627.555847,183.810089 605.940308,199.460968 594.671570,227.259979 
	C583.406311,255.050278 587.961060,281.309235 606.931091,304.481537 
	C629.929565,332.574707 672.293030,339.393005 702.523865,321.408661 
	C736.289001,301.321747 750.580933,258.765686 732.214905,221.362778 
z"/>
<path fill="#FCFCFC" opacity="1.000000" stroke="none" 
	d="
M215.945953,341.032867 
	C183.224335,318.607574 166.671432,287.779297 169.525833,248.586014 
	C172.452911,208.394974 193.534592,179.368088 230.368927,162.736008 
	C289.420746,136.071869 359.977600,174.629150 370.113892,238.715988 
	C379.026306,295.065033 342.280975,346.441223 286.064728,355.667664 
	C261.100037,359.764984 237.763107,354.560394 215.945953,341.032867 
M345.907501,250.823029 
	C345.604401,248.344696 345.339417,245.860992 344.992523,243.388809 
	C339.547943,204.588028 300.424683,174.974091 261.662567,180.303360 
	C219.416672,186.111588 191.582809,220.800568 194.928909,263.472595 
	C198.218689,305.426605 240.397736,337.980438 281.817627,330.533356 
	C321.219727,323.449036 346.642609,292.216370 345.907501,250.823029 
z"/>
<path fill="#FDFDFD" opacity="1.000000" stroke="none" 
	d="
M1015.349426,164.311737 
	C1077.188843,136.549423 1144.821899,170.824478 1158.531738,236.530701 
	C1169.659302,289.861237 1132.640015,344.963745 1078.972290,354.953217 
	C1022.392151,365.484833 970.224915,329.932129 959.331543,273.416443 
	C950.922852,229.791519 973.748657,185.140900 1015.349426,164.311737 
M1132.997803,238.668472 
	C1122.368530,197.844894 1084.133545,173.095551 1044.346436,181.284744 
	C1005.523132,189.275558 980.402466,223.812912 983.946838,264.325592 
	C987.134216,300.757629 1019.699524,330.353821 1057.690308,331.345428 
	C1106.321167,332.614746 1144.223389,286.473145 1132.997803,238.668472 
z"/>
<path fill="#FBFBFB" opacity="1.000000" stroke="none" 
	d="
M1387.699341,224.000153 
	C1387.699341,263.153534 1387.708984,301.806915 1387.675171,340.460236 
	C1387.673096,342.774902 1387.597900,345.152893 1387.079590,347.390900 
	C1385.888550,352.532135 1381.652466,355.946350 1376.395630,356.383423 
	C1371.044312,356.828369 1365.848022,353.874359 1364.120361,348.870728 
	C1363.275269,346.422974 1363.040771,343.661255 1363.037720,341.041046 
	C1362.978149,289.725464 1362.993286,238.409744 1362.993286,187.094070 
	C1362.993286,185.274704 1362.993408,183.455353 1362.993408,181.322922 
	C1319.628296,181.322922 1276.424194,181.322922 1232.764893,181.322922 
	C1232.764893,183.141113 1232.764893,184.916901 1232.764893,186.692703 
	C1232.764771,238.341599 1232.771606,289.990509 1232.758301,341.639404 
	C1232.755859,351.338928 1228.299561,356.316498 1219.822388,356.216766 
	C1214.394409,356.152893 1210.085938,352.830170 1208.660645,347.333618 
	C1208.167114,345.430359 1208.020630,343.390442 1208.019653,341.412811 
	C1207.987427,280.933624 1207.992676,220.454422 1207.998779,159.975220 
	C1207.998901,158.982071 1208.080933,157.988937 1208.135986,156.738297 
	C1209.305908,156.621170 1210.423584,156.413849 1211.541748,156.411057 
	C1255.184937,156.302246 1298.828247,156.184448 1342.471436,156.136124 
	C1355.791626,156.121384 1369.113892,156.456802 1382.431396,156.305161 
	C1386.477539,156.259094 1387.847046,157.237946 1387.800537,161.522461 
	C1387.575806,182.179611 1387.699341,202.840561 1387.699341,224.000153 
z"/>
<path fill="#FFFFFF" opacity="1.000000" stroke="none" 
	d="
M816.141235,350.704468 
	C815.672302,337.620911 815.592163,324.796051 815.589783,311.971222 
	C815.577148,242.837723 815.583130,173.704224 815.584412,104.570717 
	C815.584595,94.159309 819.782654,88.492706 827.607178,88.325417 
	C835.527039,88.156082 840.021667,94.070595 840.021912,104.677719 
	C840.023193,176.643188 840.022583,248.608658 840.022583,320.574127 
	C840.022583,322.392670 840.022583,324.211243 840.022583,326.621277 
	C842.056274,326.621277 843.836487,326.621246 845.616699,326.621307 
	C867.106384,326.621826 888.596313,326.574615 910.085754,326.647095 
	C918.412720,326.675171 923.948486,332.012512 923.585693,339.337219 
	C923.249390,346.127594 917.948792,350.967804 910.519470,350.984680 
	C886.697693,351.038727 862.875732,351.009949 839.053833,351.005310 
	C831.557800,351.003876 824.061829,350.977936 816.141235,350.704468 
z"/>
<path fill="#FDFDFD" opacity="1.000000" stroke="none" 
	d="
M427.006317,356.947083 
	C418.608826,355.472534 414.900940,351.525574 414.896271,343.987366 
	C414.858093,282.348602 414.874451,220.709839 414.881989,159.071075 
	C414.882080,158.414886 414.985931,157.758713 415.072479,156.733734 
	C416.365936,156.621597 417.627258,156.417328 418.888702,156.416718 
	C453.872864,156.399643 488.857849,156.295898 523.839966,156.561661 
	C527.529297,156.589676 531.753479,158.045380 534.748657,160.201340 
	C538.895447,163.186249 539.429016,168.231583 537.702393,172.937363 
	C535.803223,178.113647 531.662415,180.855804 526.151733,180.956863 
	C517.658386,181.112640 509.160187,181.002991 500.664062,181.003357 
	C480.366089,181.004257 460.068146,181.003647 439.217438,181.003647 
	C439.217438,183.091660 439.217407,184.866592 439.217407,186.641541 
	C439.217377,238.617996 439.225281,290.594452 439.209869,342.570923 
	C439.207184,351.608917 436.014130,355.442322 427.006317,356.947083 
z"/>
<path fill="#FEFEFE" opacity="1.000000" stroke="none" 
	d="
M189.061188,431.179199 
	C179.197433,436.346985 169.222748,431.578705 169.094360,421.489441 
	C168.800034,398.359100 169.001236,375.222473 169.001236,351.801910 
	C177.297379,351.801910 185.378952,351.801910 193.817230,351.801910 
	C193.921616,352.886749 194.117783,353.980438 194.118698,355.074249 
	C194.136658,376.551483 194.098358,398.028839 194.158707,419.505920 
	C194.171524,424.066162 193.188736,428.068176 189.061188,431.179199 
z"/>
<path fill="#FCFCFC" opacity="1.000000" stroke="none" 
	d="
M897.945496,181.250153 
	C884.324890,181.250137 871.195435,181.250137 857.776489,181.250137 
	C857.776489,172.997314 857.776489,165.111679 857.776489,156.993652 
	C875.307312,156.993652 892.616760,156.823273 909.919617,157.085831 
	C915.994507,157.178024 920.857239,163.254959 920.704834,169.375198 
	C920.547791,175.683578 915.680298,180.837158 909.408447,181.137817 
	C905.757751,181.312820 902.094360,181.221603 897.945496,181.250153 
z"/>
<path fill="#010101" opacity="1.000000" stroke="none" 
	d="
M732.412231,221.681824 
	C750.580933,258.765686 736.289001,301.321747 702.523865,321.408661 
	C672.293030,339.393005 629.929565,332.574707 606.931091,304.481537 
	C587.961060,281.309235 583.406311,255.050278 594.671570,227.259979 
	C605.940308,199.460968 627.555847,183.810089 657.250916,180.284256 
	C687.985168,176.635040 717.537903,193.228790 732.412231,221.681824 
z"/>
<path fill="#010101" opacity="1.000000" stroke="none" 
	d="
M345.925568,251.287949 
	C346.642609,292.216370 321.219727,323.449036 281.817627,330.533356 
	C240.397736,337.980438 198.218689,305.426605 194.928909,263.472595 
	C191.582809,220.800568 219.416672,186.111588 261.662567,180.303360 
	C300.424683,174.974091 339.547943,204.588028 344.992523,243.388809 
	C345.339417,245.860992 345.604401,248.344696 345.925568,251.287949 
z"/>
<path fill="#010101" opacity="1.000000" stroke="none" 
	d="
M1133.063965,239.087387 
	C1144.223389,286.473145 1106.321167,332.614746 1057.690308,331.345428 
	C1019.699524,330.353821 987.134216,300.757629 983.946838,264.325592 
	C980.402466,223.812912 1005.523132,189.275558 1044.346436,181.284744 
	C1084.133545,173.095551 1122.368530,197.844894 1133.063965,239.087387 
z"/>
</svg>
</file>

<file path="public/proton.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 120" fill="none">
  <path fill="#FFFFFF" d="M58.5 30C80.9 30 99 48.1 99 70.5S80.9 111 58.5 111 18 92.9 18 70.5 36.1 30 58.5 30zM111 68.5h52c0-22.4-18.1-40.5-40.5-40.5H111v40.5zM180.5 30c22.4 0 40.5 18.1 40.5 40.5s-18.1 40.5-40.5 40.5S140 92.9 140 70.5 158.1 30 180.5 30zM233 42c0-6.6 5.4-12 12-12h50c22.4 0 40.5 18.1 40.5 40.5S317.4 111 295 111h-50c-6.6 0-12-5.4-12-12V42z"/>
</svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="src/components/forms/recipient-form.jsx">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"

export function RecipientForm({ recipient, personas = [], onSubmit, onCancel }) {
  const [formData, setFormData] = useState({
    name: recipient?.name || "",
    email: recipient?.email || "",
    status: recipient?.status || "active",
    persona: recipient?.persona || "",
  })

  const handleSubmit = (e) => {
    e.preventDefault()
    onSubmit(formData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="name">Recipient Name</Label>
          <Input
            id="name"
            placeholder="Enter recipient name"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            required
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="email">Email Address</Label>
          <Input
            id="email"
            type="email"
            placeholder="Enter email address"
            value={formData.email}
            onChange={(e) => setFormData({ ...formData, email: e.target.value })}
            required
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="status">Status</Label>
          <Select
            value={formData.status}
            onValueChange={(value) => setFormData({ ...formData, status: value })}
          >
            <SelectTrigger id="status">
              <SelectValue placeholder="Select status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="inactive">Inactive</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {personas.length > 0 && (
          <div className="space-y-2">
            <Label htmlFor="persona">Persona</Label>
            <Select
              value={formData.persona}
              onValueChange={(value) => setFormData({ ...formData, persona: value })}
            >
              <SelectTrigger id="persona">
                <SelectValue placeholder="Select persona" />
              </SelectTrigger>
              <SelectContent>
                {personas.map((persona) => (
                  <SelectItem key={persona.id} value={persona.id}>
                    {persona.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        )}
      </div>

      <div className="flex justify-end gap-4">
        <Button
          type="button"
          variant="outline"
          onClick={onCancel}
        >
          Cancel
        </Button>
        <Button type="submit">
          {recipient ? "Update Recipient" : "Add Recipient"}
        </Button>
      </div>
    </form>
  )
}
</file>

<file path="src/components/persona-form.jsx">
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";

export function PersonaForm({ persona, onSubmit, onCancel }) {
  const [formData, setFormData] = useState({
    name: persona?.name || "",
    email: persona?.email || "",
    description: persona?.description || "",
    status: persona?.status || "active"
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 text-white">
      <div className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="name" className="text-gray-300">Name</Label>
          <Input
            id="name"
            placeholder="Enter persona name"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            required
            className="bg-[#1e1f23] border-[#2d2e33] text-white placeholder:text-gray-500 focus:border-[#e80566] focus:ring-0"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="email" className="text-gray-300">Email</Label>
          <Input
            id="email"
            type="email"
            placeholder="Enter persona email"
            value={formData.email}
            onChange={(e) => setFormData({ ...formData, email: e.target.value })}
            required
            className="bg-[#1e1f23] border-[#2d2e33] text-white placeholder:text-gray-500 focus:border-[#e80566] focus:ring-0"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="description" className="text-gray-300">Description</Label>
          <Textarea
            id="description"
            placeholder="Describe this persona"
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            className="bg-[#1e1f23] border-[#2d2e33] text-white placeholder:text-gray-500 focus:border-[#e80566] focus:ring-0"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="status" className="text-gray-300">Status</Label>
          <Select
            value={formData.status}
            onValueChange={(value) => setFormData({ ...formData, status: value })}
          >
            <SelectTrigger className="bg-[#1e1f23] border-[#2d2e33] text-white focus:ring-0 focus:border-[#e80566]">
              <SelectValue placeholder="Select status" />
            </SelectTrigger>
            <SelectContent className="bg-[#1e1f23] border-[#2d2e33] text-white">
              <SelectItem value="active" className="focus:bg-[#2d2e33] focus:text-white">
                <div className="flex items-center">
                  <Badge className="bg-green-500 mr-2">Active</Badge>
                  <span>Active</span>
                </div>
              </SelectItem>
              <SelectItem value="inactive" className="focus:bg-[#2d2e33] focus:text-white">
                <div className="flex items-center">
                  <Badge className="bg-yellow-500 mr-2">Inactive</Badge>
                  <span>Inactive</span>
                </div>
              </SelectItem>
              <SelectItem value="archived" className="focus:bg-[#2d2e33] focus:text-white">
                <div className="flex items-center">
                  <Badge className="bg-gray-500 mr-2">Archived</Badge>
                  <span>Archived</span>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="flex justify-end space-x-4 pt-4">
        <Button 
          type="button" 
          variant="outline" 
          onClick={onCancel}
          className="border-[#2d2e33] text-gray-300 hover:bg-[#2d2e33] hover:text-white"
        >
          Cancel
        </Button>
        <Button 
          type="submit"
          className="bg-[#e80566] hover:bg-[#c30552] text-white"
        >
          {persona ? 'Update' : 'Create'} Persona
        </Button>
      </div>
    </form>
  );
}
</file>

<file path="src/components/recipient-form.jsx">
import React from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Check, X } from "lucide-react";

export default function RecipientForm({ initialData, onSubmit, onCancel }) {
  const [formData, setFormData] = React.useState({
    name: initialData?.name || "",
    email: initialData?.email || "",
    company: initialData?.company || "",
    status: initialData?.status || "active",
  });

  const [errors, setErrors] = React.useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    
    // Clear error when field is edited
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: null }));
    }
  };

  const handleStatusChange = (value) => {
    setFormData((prev) => ({ ...prev, status: value }));
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.name.trim()) {
      newErrors.name = "Name is required";
    }
    
    if (!formData.email.trim()) {
      newErrors.email = "Email is required";
    } else if (!/^\S+@\S+\.\S+$/.test(formData.email)) {
      newErrors.email = "Email is invalid";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validateForm()) {
      onSubmit(formData);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="name">Name</Label>
        <Input
          id="name"
          name="name"
          placeholder="Enter recipient name"
          value={formData.name}
          onChange={handleChange}
          className={errors.name ? "border-red-500" : ""}
        />
        {errors.name && <p className="text-sm text-red-500">{errors.name}</p>}
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="email">Email</Label>
        <Input
          id="email"
          name="email"
          type="email"
          placeholder="Enter recipient email"
          value={formData.email}
          onChange={handleChange}
          className={errors.email ? "border-red-500" : ""}
        />
        {errors.email && <p className="text-sm text-red-500">{errors.email}</p>}
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="company">Company (Optional)</Label>
        <Input
          id="company"
          name="company"
          placeholder="Enter company name"
          value={formData.company}
          onChange={handleChange}
        />
      </div>
      
      <div className="space-y-2">
        <Label>Status</Label>
        <RadioGroup
          value={formData.status}
          onValueChange={handleStatusChange}
          className="flex space-x-4"
        >
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="active" id="active" />
            <Label htmlFor="active" className="cursor-pointer">Active</Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="inactive" id="inactive" />
            <Label htmlFor="inactive" className="cursor-pointer">Inactive</Label>
          </div>
        </RadioGroup>
      </div>
      
      <div className="flex justify-end space-x-2 pt-4">
        <Button type="button" variant="outline" onClick={onCancel}>
          <X className="h-4 w-4 mr-2" />
          Cancel
        </Button>
        <Button type="submit">
          <Check className="h-4 w-4 mr-2" />
          {initialData ? "Update" : "Create"}
        </Button>
      </div>
    </form>
  );
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="src/app/projects/[id]/page.js">
"use client"

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { StatusBadge } from "@/components/ui/status-badge";
import { DataTable } from "@/components/ui/data-table";
import { Modal } from "@/components/ui/modal";
import { ProjectForm } from "@/components/forms/project-form";
import { ScrapingPackageConfigForm } from "@/components/forms/scraping-package-config-form";
import { mockApi } from "@/lib/mock-data";
import { Upload, FileText, Plus, Settings, History, Edit, X, Search } from "lucide-react";
import { Input } from "@/components/ui/input";

export default function ProjectPage() {
  const { id } = useParams();
  const [project, setProject] = useState(null);
  const [documents, setDocuments] = useState([]);
  const [packages, setPackages] = useState([]);
  const [personas, setPersonas] = useState([]);
  const [newsletters, setNewsletters] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [activeTab, setActiveTab] = useState("documents");
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [showPackageModal, setShowPackageModal] = useState(false);
  const [showConfigureModal, setShowConfigureModal] = useState(false);
  const [showHistoryModal, setShowHistoryModal] = useState(false);
  const [selectedPackage, setSelectedPackage] = useState(null);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [dragActive, setDragActive] = useState(false);
  const [searchNewsletter, setSearchNewsletter] = useState("");

  useEffect(() => {
    loadProjectData();
  }, [id]);

  const loadProjectData = async () => {
    try {
      const [projectData, documentsData, packagesData, personasData, newslettersData] = await Promise.all([
        mockApi.getProject(id),
        mockApi.getProjectDocuments(id),
        mockApi.getProjectPackages(id),
        mockApi.getPersonas(),
        mockApi.getProjectNewsletters(id),
      ]);

      setProject(projectData);
      setDocuments(documentsData);
      setPackages(packagesData);
      setPersonas(personasData);
      setNewsletters(newslettersData);
    } catch (error) {
      console.error("Error loading project data:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleUpdateProject = async (formData) => {
    try {
      const updatedProject = await mockApi.updateProject(id, formData);
      setProject(updatedProject);
      setIsEditModalOpen(false);
    } catch (error) {
      console.error("Error updating project:", error);
    }
  };

  const handleCreatePackage = (formData) => {
    const newPackage = {
      id: "pkg_" + Math.random().toString(36).substring(2, 9),
      ...formData,
      projectId: id,
      createdAt: new Date().toISOString(),
      lastRun: null,
      nextRun: formData.schedule?.date || null,
      status: "active"
    };
    setPackages([...packages, newPackage]);
    setShowPackageModal(false);
  }

  const handleEditPackage = (formData) => {
    const updatedPackages = packages.map((pkg) =>
      pkg.id === selectedPackage.id ? { ...pkg, ...formData } : pkg
    );
    setPackages(updatedPackages);
    setSelectedPackage(null);
    setShowPackageModal(false);
  }

  const handleConfigurePackage = (pkg) => {
    setSelectedPackage(pkg);
    setShowConfigureModal(true);
  }

  const handleViewHistory = (pkg) => {
    setSelectedPackage(pkg);
    setShowHistoryModal(true);
  }

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFiles(e.dataTransfer.files);
    }
  };

  const handleFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      handleFiles(e.target.files);
    }
  };

  const handleFiles = (files) => {
    const newFiles = Array.from(files).map(file => ({
      id: "file_" + Math.random().toString(36).substring(2, 9),
      name: file.name,
      size: formatFileSize(file.size),
      type: file.type,
      file: file
    }));
    setUploadedFiles([...uploadedFiles, ...newFiles]);
  };

  const removeFile = (id) => {
    setUploadedFiles(uploadedFiles.filter(file => file.id !== id));
  };

  const formatFileSize = (bytes) => {
    if (bytes < 1024) return bytes + ' B';
    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
    else return (bytes / 1048576).toFixed(1) + ' MB';
  };

  const formatDate = (dateString) => {
    if (!dateString) return "N/A";
    try {
      return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    } catch (error) {
      console.error("Error formatting date:", error);
      return "Invalid Date";
    }
  };

  const handleUploadDocument = () => {
    // Simulate upload and add to documents
    const newDocs = uploadedFiles.map(file => ({
      id: "doc_" + Math.random().toString(36).substring(2, 9),
      name: file.name,
      size: file.size,
      type: file.type,
      uploadedAt: new Date().toISOString()
    }));
    
    setDocuments([...documents, ...newDocs]);
    setUploadedFiles([]);
    setShowUploadModal(false);
  };

  const filteredNewsletters = newsletters.filter(newsletter => 
    newsletter.subject.toLowerCase().includes(searchNewsletter.toLowerCase())
  );

  if (isLoading) {
    return <div className="container mx-auto px-4 py-8">Loading...</div>;
  }

  if (!project) {
    return <div className="container mx-auto px-4 py-8">Project not found</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="space-y-1">
          <h1 className="text-2xl font-light">{project.name}</h1>
          <p className="text-sm text-gray-400">{project.description}</p>
        </div>
        <Button 
          onClick={() => setIsEditModalOpen(true)}
          className="bg-white text-black hover:bg-gray-200 font-light"
        >
          Edit Project
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-[#111] p-6 rounded border border-gray-800 hover:border-gray-700 transition-colors">
          <div className="space-y-2">
            <p className="text-sm text-gray-400 font-light">Documents</p>
            <div className="text-2xl font-light">{documents.length}</div>
          </div>
        </div>
        <div className="bg-[#111] p-6 rounded border border-gray-800 hover:border-gray-700 transition-colors">
          <div className="space-y-2">
            <p className="text-sm text-gray-400 font-light">Next Newsletter</p>
            <div className="text-2xl font-light">{formatDate(project.nextNewsletter)}</div>
          </div>
        </div>
        <div className="bg-[#111] p-6 rounded border border-gray-800 hover:border-gray-700 transition-colors">
          <div className="space-y-2">
            <p className="text-sm text-gray-400 font-light">Scraping Packages</p>
            <div className="text-2xl font-light">{packages.length}</div>
          </div>
        </div>
        <div className="bg-[#111] p-6 rounded border border-gray-800 hover:border-gray-700 transition-colors">
          <div className="space-y-2">
            <p className="text-sm text-gray-400 font-light">Last Updated</p>
            <div className="text-2xl font-light">{formatDate(project.lastUpdated)}</div>
          </div>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="bg-transparent border-b border-gray-800 rounded-none w-full justify-start h-auto p-0">
          <TabsTrigger 
            value="documents"
            className="rounded-none px-4 py-2 text-gray-400 data-[state=active]:text-white data-[state=active]:border-b-2 data-[state=active]:border-white font-light"
          >
            Documents
          </TabsTrigger>
          <TabsTrigger 
            value="newsletter"
            className="rounded-none px-4 py-2 text-gray-400 data-[state=active]:text-white data-[state=active]:border-b-2 data-[state=active]:border-white font-light"
          >
            Newsletter Settings
          </TabsTrigger>
          <TabsTrigger 
            value="scraping"
            className="rounded-none px-4 py-2 text-gray-400 data-[state=active]:text-white data-[state=active]:border-b-2 data-[state=active]:border-white font-light"
          >
            Scraping Packages
          </TabsTrigger>
        </TabsList>

        <TabsContent value="documents" className="space-y-4">
          <div className="flex justify-between items-center">
            <div className="space-y-1">
              <h2 className="text-lg font-light">Documents</h2>
              <p className="text-sm text-gray-400">
                Manage project documents and files
              </p>
            </div>
            <Button 
              onClick={() => setShowUploadModal(true)}
              className="bg-white text-black hover:bg-gray-200 font-light"
            >
              <Upload className="h-4 w-4 mr-2" />
              Upload Document
            </Button>
          </div>

          {documents.length === 0 ? (
            <div className="text-center py-12 border border-dashed border-gray-800 rounded-md bg-[#111]">
              <FileText className="h-12 w-12 mx-auto text-gray-500 mb-4" />
              <h3 className="text-lg font-light mb-2">No Documents Yet</h3>
              <p className="text-sm text-gray-400 mb-4">
                Upload documents to get started with your project
              </p>
              <Button 
                onClick={() => setShowUploadModal(true)}
                className="bg-white text-black hover:bg-gray-200 font-light"
              >
                Upload Document
              </Button>
            </div>
          ) : (
            <div className="grid gap-4">
              {documents.map((doc) => (
                <div key={doc.id} className="bg-[#111] p-4 rounded border border-gray-800 hover:border-gray-700 transition-colors">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="font-light text-white">{doc.name}</h3>
                      <p className="text-sm text-gray-400">
                        {doc.size} • Uploaded {formatDate(doc.uploadedAt)}
                      </p>
                    </div>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
                    >
                      Download
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="newsletter" className="space-y-6">
          <div className="space-y-1">
            <h2 className="text-lg font-light">Newsletter Settings</h2>
            <p className="text-sm text-gray-400">
              Configure newsletter delivery schedule and settings
            </p>
          </div>

          <div className="bg-[#111] rounded-lg border border-gray-800 p-6 space-y-8">
            <div className="space-y-4">
              <h3 className="text-sm font-medium">Frequency & Schedule</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="space-y-2">
                  <label className="text-sm text-gray-400 font-light">Delivery Frequency</label>
                  <div className="flex gap-2">
                    <Button variant="default" size="sm" className="bg-white text-black hover:bg-gray-200 font-light">Weekly</Button>
                    <Button variant="outline" size="sm" className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light">Bi-weekly</Button>
                    <Button variant="outline" size="sm" className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light">Monthly</Button>
                    <Button variant="outline" size="sm" className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light">Custom</Button>
                  </div>
                </div>
                <div className="space-y-2">
                  <label className="text-sm text-gray-400 font-light">Send Time</label>
                  <Button variant="outline" className="w-full justify-between border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light">
                    9:00 AM
                    <span className="text-gray-500">▼</span>
                  </Button>
                </div>
                <div className="space-y-2">
                  <label className="text-sm text-gray-400 font-light">Day of Week</label>
                  <Button variant="outline" className="w-full justify-between border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light">
                    Monday
                    <span className="text-gray-500">▼</span>
                  </Button>
                </div>
              </div>
            </div>

            <div className="flex justify-end">
              <Button className="bg-white text-black hover:bg-gray-200 font-light">Save Settings</Button>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2 space-y-4">
              <div className="flex justify-between items-center">
                <h3 className="text-sm font-light">Sent Newsletters</h3>
                <div className="relative max-w-sm">
                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search newsletters..."
                    className="pl-8 bg-[#111] border-gray-800 text-white"
                    value={searchNewsletter}
                    onChange={(e) => setSearchNewsletter(e.target.value)}
                  />
                </div>
              </div>

              <div className="bg-[#111] rounded-lg border border-gray-800 divide-y divide-gray-800">
                {filteredNewsletters.length === 0 ? (
                  <div className="p-4 text-center text-gray-400">
                    No newsletters found
                  </div>
                ) : (
                  filteredNewsletters.map((newsletter) => (
                    <div key={newsletter.id} className="p-4 space-y-2">
                      <div className="flex justify-between">
                        <h4 className="font-light text-white">{newsletter.subject}</h4>
                        <span className="text-sm text-gray-400">
                          {formatDate(newsletter.sentAt || newsletter.scheduledFor)}
                        </span>
                      </div>
                      <p className="text-sm text-gray-400">
                        Sent to {newsletter.recipients} recipients
                      </p>
                      <div className="flex gap-4 text-sm">
                        <span className="text-gray-300">Open Rate: {newsletter.stats?.openRate || 0}%</span>
                        <span className="text-gray-300">Click Rate: {newsletter.stats?.clickRate || 0}%</span>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-sm font-light">Analytics Overview</h3>
              <div className="bg-[#111] rounded-lg border border-gray-800 p-4 space-y-6">
                <div className="space-y-1">
                  <p className="text-sm text-gray-400 font-light">Average Open Rate</p>
                  <p className="text-2xl font-light">68.3%</p>
                </div>
                <div className="space-y-1">
                  <p className="text-sm text-gray-400 font-light">Average Click Rate</p>
                  <p className="text-2xl font-light">38.3%</p>
                </div>
                <div className="space-y-1">
                  <p className="text-sm text-gray-400 font-light">Total Subscribers</p>
                  <p className="text-2xl font-light">{project.recipients}</p>
                </div>
                <Button 
                  variant="outline" 
                  className="w-full border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
                >
                  Download Report
                </Button>
              </div>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="scraping" className="space-y-4">
          <div className="flex justify-between items-center">
            <div className="space-y-1">
              <h2 className="text-lg font-light">Scraping Packages</h2>
              <p className="text-sm text-gray-400">
                Manage and configure content scraping packages
              </p>
            </div>
            <Button 
              onClick={() => {
                setSelectedPackage(null);
                setShowPackageModal(true);
              }}
              className="bg-white text-black hover:bg-gray-200 font-light"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Package
            </Button>
          </div>

          {packages.length === 0 ? (
            <div className="text-center py-12 border border-dashed border-gray-800 rounded-md bg-[#111]">
              <h3 className="text-lg font-light mb-2">No Scraping Packages Yet</h3>
              <p className="text-sm text-gray-400 mb-4">
                Create a scraping package to automate content collection
              </p>
              <Button 
                onClick={() => {
                  setSelectedPackage(null);
                  setShowPackageModal(true);
                }}
                className="bg-white text-black hover:bg-gray-200 font-light"
              >
                Add Package
              </Button>
            </div>
          ) : (
            <div className="grid gap-4">
              {packages.map((pkg) => (
                <div key={pkg.id} className="bg-[#111] p-4 rounded border border-gray-800 hover:border-gray-700 transition-colors">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="flex items-center gap-2">
                        <h3 className="font-light text-white">{pkg.name}</h3>
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-light ${
                          pkg.status === "active" ? "bg-green-900/30 text-green-400" : "bg-gray-800 text-gray-400"
                        }`}>
                          {pkg.status}
                        </span>
                      </div>
                      <p className="text-sm text-gray-400 mt-1">
                        {pkg.description}
                      </p>
                      <div className="flex gap-4 text-sm mt-3">
                        <span className="text-gray-400">
                          Last run: {pkg.lastRun ? formatDate(pkg.lastRun) : "Never"}
                        </span>
                        <span className="text-gray-400">
                          Next run: {formatDate(pkg.nextRun)}
                        </span>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleViewHistory(pkg)}
                        className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
                      >
                        <History className="h-4 w-4 mr-2" />
                        History
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleConfigurePackage(pkg)}
                        className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
                      >
                        <Settings className="h-4 w-4 mr-2" />
                        Configure
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => {
                          setSelectedPackage(pkg);
                          setShowPackageModal(true);
                        }}
                        className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
                      >
                        <Edit className="h-4 w-4 mr-2" />
                        Edit
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </TabsContent>
      </Tabs>

      <Modal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        title="Edit Project"
      >
        <ProjectForm
          project={project}
          onSubmit={handleUpdateProject}
          onCancel={() => setIsEditModalOpen(false)}
        />
      </Modal>

      <Modal
        isOpen={showUploadModal}
        onClose={() => setShowUploadModal(false)}
        title="Upload Document"
      >
        <div className="space-y-6">
          <div 
            className={`border-2 border-dashed rounded-lg p-10 text-center ${
              dragActive ? "border-gray-600 bg-gray-900/10" : "border-gray-800"
            } bg-[#111]`}
            onDragEnter={handleDrag}
            onDragOver={handleDrag}
            onDragLeave={handleDrag}
            onDrop={handleDrop}
          >
            <p className="text-gray-400 mb-2 font-light">Drag and drop your file here, or</p>
            <input
              type="file"
              id="file-input"
              className="hidden"
              multiple
              onChange={handleFileChange}
            />
            <label htmlFor="file-input">
              <Button 
                as="span"
                className="bg-white text-black hover:bg-gray-200 font-light cursor-pointer"
              >
                Browse Files
              </Button>
            </label>
            <p className="text-xs text-gray-500 mt-4">Supported file types: PDF, DOCX, XLSX, CSV, TXT (Max 10MB)</p>
          </div>

          {uploadedFiles.length > 0 && (
            <div className="border border-gray-800 rounded-md divide-y divide-gray-800 bg-[#111]">
              {uploadedFiles.map((file) => (
                <div key={file.id} className="flex items-center justify-between p-3">
                  <div className="flex items-center">
                    <FileText className="h-5 w-5 mr-3 text-gray-400" />
                    <div>
                      <p className="font-light text-white">{file.name}</p>
                      <p className="text-xs text-gray-400">{file.size}</p>
                    </div>
                  </div>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    onClick={() => removeFile(file.id)}
                    className="h-8 w-8 p-0 text-gray-400 hover:text-white hover:bg-gray-800"
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              ))}
            </div>
          )}
          
          <div className="flex justify-end space-x-2">
            <Button
              variant="outline"
              onClick={() => {
                setUploadedFiles([]);
                setShowUploadModal(false);
              }}
              className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
            >
              Cancel
            </Button>
            <Button 
              disabled={uploadedFiles.length === 0}
              onClick={handleUploadDocument}
              className="bg-white text-black hover:bg-gray-200 font-light disabled:bg-gray-800 disabled:text-gray-500"
            >
              Upload
            </Button>
          </div>
        </div>
      </Modal>

      <Modal
        isOpen={showPackageModal}
        onClose={() => {
          setShowPackageModal(false);
          setSelectedPackage(null);
        }}
        title={selectedPackage ? "Edit Scraping Package" : "Create Scraping Package"}
      >
        <ScrapingPackageConfigForm
          scrapingPackage={selectedPackage}
          personas={personas}
          onSubmit={selectedPackage ? handleEditPackage : handleCreatePackage}
          onCancel={() => {
            setShowPackageModal(false);
            setSelectedPackage(null);
          }}
        />
      </Modal>

      <Modal
        isOpen={showConfigureModal}
        onClose={() => {
          setShowConfigureModal(false);
          setSelectedPackage(null);
        }}
        title={`Configure ${selectedPackage?.name || 'Scraping Package'}`}
      >
        <ScrapingPackageConfigForm
          scrapingPackage={selectedPackage}
          personas={personas}
          onSubmit={(formData) => {
            const updatedPackages = packages.map((pkg) =>
              pkg.id === selectedPackage.id ? { ...pkg, ...formData } : pkg
            );
            setPackages(updatedPackages);
            setSelectedPackage(null);
            setShowConfigureModal(false);
          }}
          onCancel={() => {
            setShowConfigureModal(false);
            setSelectedPackage(null);
          }}
        />
      </Modal>
    </div>
  );
}
</file>

<file path="src/app/projects/page.js">
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Modal } from "@/components/ui/modal"
import { ProjectForm } from "@/components/forms/project-form"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"

export default function ProjectsPage() {
  const router = useRouter()
  const [projects, setProjects] = useState([
    { id: "proj_1", name: "AI-driven content analysis", description: "Automated content evaluation for market trends", status: "active", lastUpdated: "2024-03-15" },
    { id: "proj_2", name: "Market research automation", description: "Competitor analysis in retail sector", status: "archived", lastUpdated: "2024-03-14" },
    { id: "proj_3", name: "Customer feedback analysis", description: "Sentiment analysis of survey responses", status: "active", lastUpdated: "2024-03-13" },
  ])
  const [searchInput, setSearchInput] = useState("")
  const [rowsPerPage, setRowsPerPage] = useState(10)
  const [currentPage, setCurrentPage] = useState(1)
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [showDeleteDialog, setShowDeleteDialog] = useState(false)
  const [selectedProject, setSelectedProject] = useState(null)

  // Filter projects based on search input
  const filteredProjects = projects.filter(project =>
    project.name.toLowerCase().includes(searchInput.toLowerCase()) ||
    project.description.toLowerCase().includes(searchInput.toLowerCase())
  )

  // Calculate pagination
  const totalProjects = filteredProjects.length
  const totalPages = Math.ceil(totalProjects / rowsPerPage)
  const startIndex = (currentPage - 1) * rowsPerPage
  const endIndex = startIndex + rowsPerPage
  const currentProjects = filteredProjects.slice(startIndex, endIndex)

  const handleCreateProject = (projectData) => {
    const newProject = {
      id: "proj_" + Math.random().toString(36).substring(2, 9),
      ...projectData,
      lastUpdated: new Date().toISOString().split("T")[0]
    }
    setProjects([...projects, newProject])
    setShowCreateModal(false)
  }

  const handleEditProject = (projectData) => {
    const updatedProjects = projects.map(project =>
      project.id === selectedProject.id
        ? { ...project, ...projectData, lastUpdated: new Date().toISOString().split("T")[0] }
        : project
    )
    setProjects(updatedProjects)
    setShowEditModal(false)
    setSelectedProject(null)
  }

  const handleDeleteProject = () => {
    const updatedProjects = projects.filter(project => project.id !== selectedProject.id)
    setProjects(updatedProjects)
    setShowDeleteDialog(false)
    setSelectedProject(null)
  }

  const handlePageChange = (page) => {
    setCurrentPage(page)
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-2xl font-light">Projects</h1>
        <Button 
          onClick={() => setShowCreateModal(true)}
          className="bg-white text-black hover:bg-gray-200 font-light"
        >
          Create Project
        </Button>
      </div>

      <div className="flex justify-between items-center mb-6 gap-4">
        <Input
          placeholder="Search projects..."
          value={searchInput}
          onChange={(e) => setSearchInput(e.target.value)}
          className="max-w-sm bg-[#111] border-gray-800 text-white"
        />
        <Select value={rowsPerPage.toString()} onValueChange={(value) => setRowsPerPage(Number(value))}>
          <SelectTrigger className="w-[140px] bg-[#111] border-gray-800 text-white font-light">
            <SelectValue placeholder="Rows per page" />
          </SelectTrigger>
          <SelectContent className="bg-[#111] border-gray-800 text-white">
            <SelectItem value="10">10 rows</SelectItem>
            <SelectItem value="20">20 rows</SelectItem>
            <SelectItem value="50">50 rows</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="rounded border border-gray-800 bg-black overflow-hidden">
        <table className="w-full">
          <thead>
            <tr className="border-b border-gray-800">
              <th className="px-6 py-3 text-left text-sm font-light text-gray-400">Name</th>
              <th className="px-6 py-3 text-left text-sm font-light text-gray-400">Description</th>
              <th className="px-6 py-3 text-left text-sm font-light text-gray-400">Status</th>
              <th className="px-6 py-3 text-left text-sm font-light text-gray-400">Last Updated</th>
              <th className="px-6 py-3 text-left text-sm font-light text-gray-400">Actions</th>
            </tr>
          </thead>
          <tbody>
            {currentProjects.map((project) => (
              <tr key={project.id} className="border-b border-gray-800 hover:bg-[#0a0a0a] cursor-pointer">
                <td 
                  className="px-6 py-4 text-sm"
                  onClick={() => router.push(`/projects/${project.id}`)}
                >
                  {project.name}
                </td>
                <td 
                  className="px-6 py-4 text-sm text-gray-400"
                  onClick={() => router.push(`/projects/${project.id}`)}
                >
                  {project.description}
                </td>
                <td 
                  className="px-6 py-4"
                  onClick={() => router.push(`/projects/${project.id}`)}
                >
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-light ${
                    project.status === "active" ? "bg-green-900/30 text-green-400" : "bg-gray-800 text-gray-400"
                  }`}>
                    {project.status}
                  </span>
                </td>
                <td 
                  className="px-6 py-4 text-sm text-gray-400"
                  onClick={() => router.push(`/projects/${project.id}`)}
                >
                  {project.lastUpdated}
                </td>
                <td className="px-6 py-4 text-sm">
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
                      onClick={(e) => {
                        e.stopPropagation()
                        setSelectedProject(project)
                        setShowEditModal(true)
                      }}
                    >
                      Edit
                    </Button>
                    <Button
                      variant="destructive"
                      size="sm"
                      className="bg-red-900/30 text-red-400 hover:bg-red-900/50 font-light"
                      onClick={(e) => {
                        e.stopPropagation()
                        setSelectedProject(project)
                        setShowDeleteDialog(true)
                      }}
                    >
                      Delete
                    </Button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {totalPages > 1 && (
        <div className="flex justify-between items-center mt-6">
          <div className="text-sm text-gray-400 font-light">
            Showing {startIndex + 1} to {Math.min(endIndex, totalProjects)} of {totalProjects} results
          </div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
            >
              Previous
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
            >
              Next
            </Button>
          </div>
        </div>
      )}

      <Modal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        title="Create Project"
      >
        <ProjectForm onSubmit={handleCreateProject} onCancel={() => setShowCreateModal(false)} />
      </Modal>

      <Modal
        isOpen={showEditModal}
        onClose={() => {
          setShowEditModal(false)
          setSelectedProject(null)
        }}
        title="Edit Project"
      >
        <ProjectForm
          project={selectedProject}
          onSubmit={handleEditProject}
          onCancel={() => {
            setShowEditModal(false)
            setSelectedProject(null)
          }}
        />
      </Modal>

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent className="bg-[#111] border-gray-800 text-white">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-white">Are you sure?</AlertDialogTitle>
            <AlertDialogDescription className="text-gray-400">
              This action cannot be undone. This will permanently delete the project
              and all of its data.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => {
              setShowDeleteDialog(false)
              setSelectedProject(null)
            }}
            className="bg-transparent border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteProject}
              className="bg-red-900/30 text-red-400 hover:bg-red-900/50 font-light"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  )
}
</file>

<file path="src/app/scraping-packages/page.js">
"use client"

import React, { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Modal } from "@/components/ui/modal"
import { PersonaForm } from "@/components/forms/persona-form"
import { RecipientForm } from "@/components/forms/recipient-form"
import { ScrapingPackageConfigForm } from "@/components/forms/scraping-package-config-form"
import { ScrapingPackageHistory } from "@/components/scraping-package-history"
import { Plus, Settings, History, Edit, MoreHorizontal, Users, UserCircle, Trash, Search, RefreshCw, Calendar, Mail, Filter, Package } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from "@/components/ui/table"
import { mockApi } from "@/lib/mock-data"
import { Input } from "@/components/ui/input"
import { PlusCircle, Edit2, Eye, Clock, MailCheck, Check, X } from "lucide-react"
import { format, parseISO } from "date-fns"

export default function ScrapingPackagesPage() {
  const [activeTab, setActiveTab] = useState("packages")
  const [showPackageModal, setShowPackageModal] = useState(false)
  const [showPersonaModal, setShowPersonaModal] = useState(false)
  const [showRecipientModal, setShowRecipientModal] = useState(false)
  const [showConfigureModal, setShowConfigureModal] = useState(false)
  const [showHistoryModal, setShowHistoryModal] = useState(false)
  const [selectedPackage, setSelectedPackage] = useState(null)
  const [selectedPersona, setSelectedPersona] = useState(null)
  const [selectedRecipient, setSelectedRecipient] = useState(null)
  const [packages, setPackages] = useState([])
  const [personas, setPersonas] = useState([])
  const [recipients, setRecipients] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [packageSearch, setPackageSearch] = useState("")
  const [personaSearch, setPersonaSearch] = useState("")
  const [recipientSearch, setRecipientSearch] = useState("")

  useEffect(() => {
    loadData()
  }, [])

  const loadData = async () => {
    try {
      const [packagesData, personasData, recipientsData] = await Promise.all([
        mockApi.getScrapingPackages(),
        mockApi.getPersonas(),
        mockApi.getRecipients(),
      ])

      setPackages(packagesData || [])
      setPersonas(personasData || [])
      setRecipients(recipientsData || [])
    } catch (error) {
      console.error("Error loading data:", error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleCreatePackage = (formData) => {
    const newPackage = {
      id: "pkg_" + Math.random().toString(36).substring(2, 9),
      ...formData,
      createdAt: new Date().toISOString(),
      lastRun: null,
      nextRun: formData.schedule?.date || null,
      status: "active"
    }
    setPackages([...packages, newPackage])
    setShowPackageModal(false)
  }

  const handleEditPackage = (formData) => {
    const updatedPackages = packages.map((pkg) =>
      pkg.id === selectedPackage.id ? { ...pkg, ...formData } : pkg
    )
    setPackages(updatedPackages)
    setSelectedPackage(null)
    setShowPackageModal(false)
  }

  const handleCreatePersona = (formData) => {
    const newPersona = {
      id: "pers_" + Math.random().toString(36).substring(2, 9),
      ...formData,
      createdAt: new Date().toISOString(),
      status: "active"
    }
    setPersonas([...personas, newPersona])
    setShowPersonaModal(false)
  }

  const handleEditPersona = (formData) => {
    const updatedPersonas = personas.map((persona) =>
      persona.id === selectedPersona.id ? { ...persona, ...formData } : persona
    )
    setPersonas(updatedPersonas)
    setSelectedPersona(null)
    setShowPersonaModal(false)
  }

  const handleCreateRecipient = (formData) => {
    const newRecipient = {
      id: "rec_" + Math.random().toString(36).substring(2, 9),
      ...formData,
      createdAt: new Date().toISOString()
    }
    setRecipients([...recipients, newRecipient])
    setShowRecipientModal(false)
  }

  const handleEditRecipient = (formData) => {
    const updatedRecipients = recipients.map((recipient) =>
      recipient.id === selectedRecipient.id ? { ...recipient, ...formData } : recipient
    )
    setRecipients(updatedRecipients)
    setSelectedRecipient(null)
    setShowRecipientModal(false)
  }

  const handleConfigurePackage = (pkg) => {
    setSelectedPackage(pkg)
    setShowConfigureModal(true)
  }

  const handleViewHistory = (pkg) => {
    setSelectedPackage(pkg)
    setShowHistoryModal(true)
  }

  const handleManageRecipients = (persona) => {
    setSelectedPersona(persona)
    setShowRecipientModal(true)
  }

  const getPersonaRecipients = (personaId) => {
    return recipients.filter(recipient => recipient.persona === personaId)
  }

  const formatDate = (dateString) => {
    if (!dateString) return "Not scheduled"
    try {
      return format(parseISO(dateString), "MMM d, yyyy h:mm a")
    } catch (error) {
      console.error("Error formatting date:", error)
      return "Invalid Date"
    }
  }

  const filteredPackages = packages.filter(pkg => 
    pkg.name.toLowerCase().includes(packageSearch.toLowerCase())
  )

  const filteredPersonas = personas.filter(persona => 
    persona.name.toLowerCase().includes(personaSearch.toLowerCase())
  )

  const filteredRecipients = recipients.filter(recipient => 
    recipient.name.toLowerCase().includes(recipientSearch.toLowerCase()) || 
    recipient.email.toLowerCase().includes(recipientSearch.toLowerCase()) ||
    (recipient.company && recipient.company.toLowerCase().includes(recipientSearch.toLowerCase()))
  )

  if (isLoading) {
    return <div className="container mx-auto px-4 py-8">Loading...</div>
  }

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-light">Content Sources</h1>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="bg-transparent border-b border-gray-800 rounded-none w-full justify-start h-auto p-0">
          <TabsTrigger 
            value="packages" 
            className="rounded-none px-4 py-2 text-gray-400 data-[state=active]:text-white data-[state=active]:border-b-2 data-[state=active]:border-white font-light"
          >
            Scraping Packages
          </TabsTrigger>
          <TabsTrigger 
            value="personas" 
            className="rounded-none px-4 py-2 text-gray-400 data-[state=active]:text-white data-[state=active]:border-b-2 data-[state=active]:border-white font-light"
          >
            Personas
          </TabsTrigger>
          <TabsTrigger 
            value="recipients" 
            className="rounded-none px-4 py-2 text-gray-400 data-[state=active]:text-white data-[state=active]:border-b-2 data-[state=active]:border-white font-light"
          >
            Recipients
          </TabsTrigger>
        </TabsList>

        <TabsContent value="packages" className="space-y-4">
          <div className="flex justify-between items-center">
            <div className="relative max-w-sm">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search packages..."
                className="pl-8 bg-[#111] border-gray-800 text-white"
                value={packageSearch}
                onChange={(e) => setPackageSearch(e.target.value)}
              />
            </div>
            <Button
              onClick={() => {
                setSelectedPackage(null)
                setShowPackageModal(true)
              }}
              className="bg-white text-black hover:bg-gray-200 font-light"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Package
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-6">
            {filteredPackages.length === 0 ? (
              <div className="text-center py-12 col-span-full bg-[#111] rounded-lg border border-gray-800">
                <Package className="h-12 w-12 mx-auto text-gray-500 mb-4" />
                <h3 className="text-lg font-light mb-2">No Packages Yet</h3>
                <p className="text-sm text-gray-400 mb-4">
                  Create your first scraping package to get started
                </p>
                <Button 
                  onClick={() => setShowPackageModal(true)} 
                  className="bg-white text-black hover:bg-gray-200 font-light"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Package
                </Button>
              </div>
            ) : (
              filteredPackages.map((pkg) => (
                <div key={pkg.id} className="bg-[#111] p-4 rounded border border-gray-800 hover:border-gray-700 transition-colors">
                  <div className="mb-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-light text-white">{pkg.name}</h3>
                        <p className="text-sm text-gray-400">
                          {pkg.description}
                        </p>
                      </div>
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-light ${
                        pkg.status === "active" ? "bg-green-900/30 text-green-400" : "bg-gray-800 text-gray-400"
                      }`}>
                        {pkg.status}
                      </span>
                    </div>
                  </div>
                  <div className="space-y-2 text-sm mb-4">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Last run:</span>
                      <span className="text-gray-300">{formatDate(pkg.lastRun)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Next run:</span>
                      <span className="text-gray-300">{formatDate(pkg.nextRun)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Items processed:</span>
                      <span className="text-gray-300">{pkg.itemsProcessed}</span>
                    </div>
                  </div>
                  <div className="flex justify-between border-t border-gray-800 pt-4">
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => handleViewHistory(pkg)}
                      className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
                    >
                      <History className="h-4 w-4 mr-2" />
                      History
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => handleEditPackage(pkg)}
                      className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
                    >
                      <Settings className="h-4 w-4 mr-2" />
                      Configure
                    </Button>
                  </div>
                </div>
              ))
            )}
          </div>
        </TabsContent>

        <TabsContent value="personas" className="space-y-4">
          <div className="flex justify-between items-center">
            <div className="relative max-w-sm">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search personas..."
                className="pl-8 bg-[#111] border-gray-800 text-white"
                value={personaSearch}
                onChange={(e) => setPersonaSearch(e.target.value)}
              />
            </div>
            <Button
              onClick={() => {
                setSelectedPersona(null)
                setShowPersonaModal(true)
              }}
              className="bg-white text-black hover:bg-gray-200 font-light"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Persona
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredPersonas.length === 0 ? (
              <div className="text-center py-12 col-span-full bg-[#111] rounded-lg border border-gray-800">
                <UserCircle className="h-12 w-12 mx-auto text-gray-500 mb-4" />
                <h3 className="text-lg font-light mb-2">No Personas Yet</h3>
                <p className="text-sm text-gray-400 mb-4">
                  Create your first persona to get started
                </p>
                <Button 
                  onClick={() => {
                    setSelectedPersona(null)
                    setShowPersonaModal(true)
                  }}
                  className="bg-white text-black hover:bg-gray-200 font-light"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Persona
                </Button>
              </div>
            ) : (
              filteredPersonas.map((persona) => {
                const personaRecipients = getPersonaRecipients(persona.id)
                return (
                  <div key={persona.id} className="bg-[#111] p-4 rounded border border-gray-800 hover:border-gray-700 transition-colors">
                    <div className="mb-4">
                      <div className="flex justify-between items-start">
                        <h3 className="font-light text-white">{persona.name}</h3>
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-light bg-gray-800 text-gray-300">
                          {personaRecipients.length} Recipients
                        </span>
                      </div>
                      <p className="text-sm text-gray-400">
                        {persona.description || "No description"}
                      </p>
                    </div>
                    <div className="space-y-2 text-sm mb-4">
                      <div className="flex justify-between">
                        <span className="text-gray-400">Email:</span>
                        <span className="text-gray-300">{persona.email}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">Created:</span>
                        <span className="text-gray-300">{formatDate(persona.createdAt)}</span>
                      </div>
                    </div>
                    <div className="flex justify-between border-t border-gray-800 pt-4">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => handleManageRecipients(persona)}
                        className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
                      >
                        <Users className="h-4 w-4 mr-2" />
                        Recipients
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => handleEditPersona(persona)}
                        className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
                      >
                        <Edit className="h-4 w-4 mr-2" />
                        Edit
                      </Button>
                    </div>
                  </div>
                )
              })
            )}
          </div>
        </TabsContent>

        <TabsContent value="recipients" className="space-y-4">
          <div className="flex justify-between items-center">
            <div className="relative max-w-sm">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search recipients..."
                className="pl-8 bg-[#111] border-gray-800 text-white"
                value={recipientSearch}
                onChange={(e) => setRecipientSearch(e.target.value)}
              />
            </div>
            <Button
              onClick={() => {
                setSelectedRecipient(null)
                setShowRecipientModal(true)
              }}
              className="bg-white text-black hover:bg-gray-200 font-light"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Recipient
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredRecipients.length === 0 ? (
              <div className="text-center py-12 col-span-full bg-[#111] rounded-lg border border-gray-800">
                <Mail className="h-12 w-12 mx-auto text-gray-500 mb-4" />
                <h3 className="text-lg font-light mb-2">No Recipients Yet</h3>
                <p className="text-sm text-gray-400 mb-4">
                  Add recipients to manage your audience
                </p>
                <Button 
                  onClick={() => {
                    setSelectedRecipient(null)
                    setShowRecipientModal(true)
                  }}
                  className="bg-white text-black hover:bg-gray-200 font-light"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Recipient
                </Button>
              </div>
            ) : (
              filteredRecipients.map((recipient) => (
                <div key={recipient.id} className="bg-[#111] p-4 rounded border border-gray-800 hover:border-gray-700 transition-colors">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="font-light text-white">{recipient.name}</h3>
                    <Button
                      size="icon"
                      variant="ghost"
                      onClick={() => {
                        setSelectedRecipient(recipient)
                        setShowRecipientModal(true)
                      }}
                      className="h-8 w-8 text-gray-400 hover:text-white hover:bg-gray-800"
                    >
                      <Edit2 className="h-4 w-4" />
                    </Button>
                  </div>
                  <p className="text-sm text-gray-400 mb-4">{recipient.email}</p>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center text-sm">
                      <MailCheck className="h-4 w-4 mr-2 text-gray-500" />
                      <span className="text-gray-400">Newsletters: {recipient.newsletterCount || 0}</span>
                    </div>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-light ${
                      recipient.status === "active" ? "bg-green-900/30 text-green-400" : "bg-gray-800 text-gray-400"
                    }`}>
                      {recipient.status}
                    </span>
                  </div>
                </div>
              ))
            )}
          </div>
        </TabsContent>
      </Tabs>

      {showPackageModal && (
        <Modal
          title={selectedPackage ? "Edit Package" : "New Package"}
          isOpen={showPackageModal}
          onClose={() => setShowPackageModal(false)}
        >
          <ScrapingPackageConfigForm
            package={selectedPackage}
            onSubmit={(pkg) => {
              if (selectedPackage) {
                handleEditPackage(pkg)
              } else {
                handleCreatePackage(pkg)
              }
              setShowPackageModal(false)
            }}
            onCancel={() => setShowPackageModal(false)}
          />
        </Modal>
      )}

      {showPersonaModal && (
        <Modal
          title={selectedPersona ? "Edit Persona" : "New Persona"}
          isOpen={showPersonaModal}
          onClose={() => setShowPersonaModal(false)}
        >
          <PersonaForm
            persona={selectedPersona}
            onSubmit={(persona) => {
              if (selectedPersona) {
                handleEditPersona(persona)
              } else {
                handleCreatePersona(persona)
              }
              setShowPersonaModal(false)
            }}
            onCancel={() => setShowPersonaModal(false)}
            availableRecipients={recipients.filter(r => r.status === "active").map(r => ({
              id: r.id,
              name: r.name,
              email: r.email,
            }))}
          />
        </Modal>
      )}

      {showHistoryModal && selectedPackage && (
        <Modal
          title={`History - ${selectedPackage.name}`}
          isOpen={showHistoryModal}
          onClose={() => setShowHistoryModal(false)}
        >
          <ScrapingPackageHistory
            packageId={selectedPackage.id}
            onClose={() => setShowHistoryModal(false)}
          />
        </Modal>
      )}

      {showRecipientModal && selectedRecipient && (
        <Modal
          title={`Edit Recipient - ${selectedRecipient.name}`}
          isOpen={showRecipientModal}
          onClose={() => setShowRecipientModal(false)}
        >
          <div className="space-y-4 py-2 pb-4">
            <div className="space-y-2">
              <label htmlFor="name" className="text-sm font-light">
                Name
              </label>
              <Input 
                id="name" 
                placeholder="Enter recipient name"
                defaultValue={selectedRecipient.name}
                className="bg-[#111] border-gray-800 text-white"
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="email" className="text-sm font-light">
                Email
              </label>
              <Input 
                id="email" 
                type="email"
                placeholder="Enter recipient email"
                defaultValue={selectedRecipient.email}
                className="bg-[#111] border-gray-800 text-white"
              />
            </div>
            <div className="space-y-2">
              <label className="text-sm font-light">
                Status
              </label>
              <div className="flex items-center space-x-2">
                <span className="inline-flex items-center px-2.5 py-1 rounded text-xs font-light bg-green-900/30 text-green-400 cursor-pointer">
                  Active
                </span>
                <span className="inline-flex items-center px-2.5 py-1 rounded text-xs font-light bg-gray-800 text-gray-400 cursor-pointer">
                  Inactive
                </span>
              </div>
            </div>
            
            <div className="flex justify-end space-x-2 pt-4">
              <Button 
                variant="outline" 
                onClick={() => setShowRecipientModal(false)}
                className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
              >
                <X className="h-4 w-4 mr-2" />
                Cancel
              </Button>
              <Button 
                onClick={() => {
                  const updatedRecipient = {
                    ...selectedRecipient,
                    name: document.getElementById("name").value,
                    email: document.getElementById("email").value,
                    status: document.querySelector('input[name="status"]:checked').value
                  }
                  handleEditRecipient(updatedRecipient)
                }}
                className="bg-white text-black hover:bg-gray-200 font-light"
              >
                <Check className="h-4 w-4 mr-2" />
                Update
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  )
}
</file>

<file path="src/app/settings/page.js">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"

export default function SettingsPage() {
  const [formData, setFormData] = useState({
    apiKey: "sk-•••••••••••••••••••••••••••••••",
    emailSender: "notifications@proto.ai",
    signature: "The Proto AI Team",
    enableWeeklyDigest: true,
    enableErrorAlerts: true,
  })

  const handleSubmit = (e) => {
    e.preventDefault()
    // Save settings
    alert("Settings saved!")
  }

  return (
    <div>
      <div className="mb-10">
        <h1 className="text-3xl font-light tracking-tight mb-2">Global Settings</h1>
        <p className="text-gray-400">Manage application settings and preferences</p>
      </div>

      <div className="bg-[#111] rounded-lg border border-gray-800 p-8">
        <form onSubmit={handleSubmit} className="space-y-8">
          <div className="space-y-6">
            <h2 className="text-xl font-light">API Configuration</h2>
            
            <div className="space-y-3">
              <Label htmlFor="apiKey" className="text-white">OpenAI API Key</Label>
              <Input
                id="apiKey"
                value={formData.apiKey}
                onChange={(e) => setFormData({ ...formData, apiKey: e.target.value })}
                className="bg-[#181818] border-gray-700 text-white"
              />
              <p className="text-sm text-gray-400">Your OpenAI API key for content generation</p>
            </div>
          </div>
          
          <div className="space-y-6">
            <h2 className="text-xl font-light">Email Settings</h2>
            
            <div className="space-y-3">
              <Label htmlFor="emailSender" className="text-white">Email Sender</Label>
              <Input
                id="emailSender"
                value={formData.emailSender}
                onChange={(e) => setFormData({ ...formData, emailSender: e.target.value })}
                className="bg-[#181818] border-gray-700 text-white"
              />
              <p className="text-sm text-gray-400">The email address that will be used to send newsletters</p>
            </div>
            
            <div className="space-y-3">
              <Label htmlFor="signature" className="text-white">Email Signature</Label>
              <Textarea
                id="signature"
                value={formData.signature}
                onChange={(e) => setFormData({ ...formData, signature: e.target.value })}
                className="bg-[#181818] border-gray-700 text-white"
                rows={3}
              />
              <p className="text-sm text-gray-400">Signature to append to the end of each email</p>
            </div>
          </div>
          
          <div className="space-y-6">
            <h2 className="text-xl font-light">Notifications</h2>
            
            <div className="flex items-center justify-between">
              <div>
                <Label htmlFor="weeklyDigest" className="text-white">Weekly Digest</Label>
                <p className="text-sm text-gray-400">Receive a weekly summary of insights</p>
              </div>
              <Switch
                id="weeklyDigest"
                checked={formData.enableWeeklyDigest}
                onCheckedChange={(checked) => setFormData({ ...formData, enableWeeklyDigest: checked })}
              />
            </div>
            
            <div className="flex items-center justify-between">
              <div>
                <Label htmlFor="errorAlerts" className="text-white">Error Alerts</Label>
                <p className="text-sm text-gray-400">Get notified when scraping jobs fail</p>
              </div>
              <Switch
                id="errorAlerts"
                checked={formData.enableErrorAlerts}
                onCheckedChange={(checked) => setFormData({ ...formData, enableErrorAlerts: checked })}
              />
            </div>
          </div>
          
          <div className="flex justify-end pt-4">
            <Button 
              type="submit"
              className="bg-white text-black hover:bg-gray-200 font-light"
            >
              Save Settings
            </Button>
          </div>
        </form>
      </div>
    </div>
  )
}
</file>

<file path="src/components/forms/persona-form.jsx">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Plus, X } from "lucide-react"

export function PersonaForm({ persona, recipients = [], onSubmit, onCancel }) {
  const [formData, setFormData] = useState({
    name: persona?.name || "",
    description: persona?.description || "",
    selectedRecipients: persona?.recipients || [],
  })

  const availableRecipients = recipients.filter(
    (recipient) => !formData.selectedRecipients.includes(recipient.id)
  )

  const handleSubmit = (e) => {
    e.preventDefault()
    onSubmit(formData)
  }

  const handleAddRecipient = (recipientId) => {
    setFormData({
      ...formData,
      selectedRecipients: [...formData.selectedRecipients, recipientId],
    })
  }

  const handleRemoveRecipient = (recipientId) => {
    setFormData({
      ...formData,
      selectedRecipients: formData.selectedRecipients.filter(
        (id) => id !== recipientId
      ),
    })
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="name">Persona Name</Label>
          <Input
            id="name"
            placeholder="Enter persona name"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            required
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="description">Description</Label>
          <Textarea
            id="description"
            placeholder="Enter persona description"
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            required
          />
        </div>

        <div className="space-y-4">
          <Label>Recipients</Label>
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium">
                Assigned Recipients
              </CardTitle>
              <CardDescription>
                Select recipients to assign to this persona
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-2 mb-4">
                {formData.selectedRecipients.map((recipientId) => {
                  const recipient = recipients.find((r) => r.id === recipientId)
                  return (
                    <Badge
                      key={recipientId}
                      variant="secondary"
                      className="flex items-center gap-1"
                    >
                      {recipient?.name}
                      <button
                        type="button"
                        onClick={() => handleRemoveRecipient(recipientId)}
                        className="ml-1 hover:bg-secondary rounded-full"
                      >
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  )
                })}
              </div>
              {availableRecipients.length > 0 && (
                <Select
                  onValueChange={handleAddRecipient}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Add recipient" />
                  </SelectTrigger>
                  <SelectContent>
                    {availableRecipients.map((recipient) => (
                      <SelectItem key={recipient.id} value={recipient.id}>
                        {recipient.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      <div className="flex justify-end gap-4">
        <Button
          type="button"
          variant="outline"
          onClick={onCancel}
        >
          Cancel
        </Button>
        <Button type="submit">
          {persona ? "Update Persona" : "Create Persona"}
        </Button>
      </div>
    </form>
  )
}
</file>

<file path="src/components/forms/project-form.jsx">
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

export function ProjectForm({ project, onSubmit, onCancel }) {
  const [formData, setFormData] = useState({
    name: project?.name || "",
    description: project?.description || "",
    status: project?.status || "active",
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-2">
        <Label htmlFor="name" className="text-white">Name</Label>
        <Input
          id="name"
          value={formData.name}
          onChange={(e) => setFormData({ ...formData, name: e.target.value })}
          className="bg-[#111] border-gray-800 text-white"
          placeholder="Project name"
          required
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="description" className="text-white">Description</Label>
        <Textarea
          id="description"
          value={formData.description}
          onChange={(e) => setFormData({ ...formData, description: e.target.value })}
          className="bg-[#111] border-gray-800 text-white"
          placeholder="Project description"
          required
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="status" className="text-white">Status</Label>
        <Select
          id="status"
          value={formData.status}
          onValueChange={(value) => setFormData({ ...formData, status: value })}
          required
        >
          <SelectTrigger className="bg-[#111] border-gray-800 text-white font-light">
            <SelectValue placeholder="Select a status" />
          </SelectTrigger>
          <SelectContent className="bg-[#111] border-gray-800 text-white">
            <SelectItem value="active">Active</SelectItem>
            <SelectItem value="archived">Archived</SelectItem>
            <SelectItem value="draft">Draft</SelectItem>
          </SelectContent>
        </Select>
      </div>
      
      <div className="flex justify-end gap-2">
        <Button 
          type="button" 
          variant="outline" 
          onClick={onCancel}
          className="bg-transparent border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
        >
          Cancel
        </Button>
        <Button 
          type="submit"
          className="bg-white text-black hover:bg-gray-200 font-light"
        >
          {project ? "Update" : "Create"}
        </Button>
      </div>
    </form>
  );
}
</file>

<file path="src/components/forms/scraping-package-config-form.jsx">
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";
import { Calendar } from "@/components/ui/calendar";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { Calendar as CalendarIcon, Check } from "lucide-react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Badge } from "@/components/ui/badge";

export function ScrapingPackageConfigForm({ scrapingPackage, personas = [], onSubmit, onCancel }) {
  const [formData, setFormData] = useState({
    name: scrapingPackage?.name || "",
    description: scrapingPackage?.description || "",
    schedule: {
      frequency: scrapingPackage?.schedule?.frequency || "daily",
      time: scrapingPackage?.schedule?.time || "09:00",
      days: scrapingPackage?.schedule?.days || ["monday", "wednesday", "friday"],
      date: scrapingPackage?.schedule?.date || new Date(),
    },
    filters: {
      keywords: scrapingPackage?.filters?.keywords || [],
      excludeKeywords: scrapingPackage?.filters?.excludeKeywords || [],
      minWordCount: scrapingPackage?.filters?.minWordCount || 100,
      maxWordCount: scrapingPackage?.filters?.maxWordCount || 1000,
      includeImages: scrapingPackage?.filters?.includeImages || true,
      includePDF: scrapingPackage?.filters?.includePDF || false,
    },
    personaId: scrapingPackage?.personaId || "",
    status: scrapingPackage?.status || "active",
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 text-white">
      <div className="space-y-4 mb-4">
        <div className="space-y-2">
          <Label htmlFor="name" className="text-gray-300 font-light">Package Name</Label>
          <Input
            id="name"
            placeholder="Enter package name"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            required
            className="bg-[#111] border-gray-800 text-white placeholder:text-gray-500 focus:border-gray-700 focus:ring-0"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="description" className="text-gray-300 font-light">Description</Label>
          <Textarea
            id="description"
            placeholder="Enter package description"
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            required
            className="bg-[#111] border-gray-800 text-white placeholder:text-gray-500 focus:border-gray-700 focus:ring-0"
          />
        </div>
      </div>

      <Tabs defaultValue="schedule" className="w-full">
        <TabsList className="bg-transparent border-b border-gray-800 rounded-none w-full justify-start h-auto p-0">
          <TabsTrigger 
            value="schedule" 
            className="rounded-none px-4 py-2 text-gray-400 data-[state=active]:text-white data-[state=active]:border-b-2 data-[state=active]:border-white font-light"
          >
            Schedule
          </TabsTrigger>
          <TabsTrigger 
            value="filters" 
            className="rounded-none px-4 py-2 text-gray-400 data-[state=active]:text-white data-[state=active]:border-b-2 data-[state=active]:border-white font-light"
          >
            Filters
          </TabsTrigger>
          <TabsTrigger 
            value="persona" 
            className="rounded-none px-4 py-2 text-gray-400 data-[state=active]:text-white data-[state=active]:border-b-2 data-[state=active]:border-white font-light"
          >
            Persona
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="schedule" className="space-y-4 pt-4">
          <div className="space-y-4">
            <div className="space-y-2">
              <Label className="text-gray-300 font-light">Frequency</Label>
              <Select
                value={formData.schedule.frequency}
                onValueChange={(value) =>
                  setFormData({
                    ...formData,
                    schedule: { ...formData.schedule, frequency: value },
                  })
                }
              >
                <SelectTrigger className="bg-[#111] border-gray-800 text-white focus:ring-0 focus:border-gray-700">
                  <SelectValue placeholder="Select frequency" />
                </SelectTrigger>
                <SelectContent className="bg-[#111] border-gray-800 text-white">
                  <SelectItem value="daily" className="focus:bg-gray-800 focus:text-white">Daily</SelectItem>
                  <SelectItem value="weekly" className="focus:bg-gray-800 focus:text-white">Weekly</SelectItem>
                  <SelectItem value="monthly" className="focus:bg-gray-800 focus:text-white">Monthly</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label className="text-gray-300 font-light">Time</Label>
              <Input
                type="time"
                value={formData.schedule.time}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    schedule: { ...formData.schedule, time: e.target.value },
                  })
                }
                className="bg-[#111] border-gray-800 text-white focus:border-gray-700 focus:ring-0"
              />
            </div>

            {formData.schedule.frequency === "weekly" && (
              <div className="space-y-2">
                <Label className="text-gray-300 font-light">Days</Label>
                <div className="flex flex-wrap gap-2">
                  {["monday", "tuesday", "wednesday", "thursday", "friday"].map(
                    (day) => (
                      <Button
                        key={day}
                        type="button"
                        variant={
                          formData.schedule.days.includes(day)
                            ? "default"
                            : "outline"
                        }
                        className={`capitalize font-light ${
                          formData.schedule.days.includes(day)
                            ? "bg-white text-black hover:bg-gray-200"
                            : "border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white"
                        }`}
                        onClick={() =>
                          setFormData({
                            ...formData,
                            schedule: {
                              ...formData.schedule,
                              days: formData.schedule.days.includes(day)
                                ? formData.schedule.days.filter((d) => d !== day)
                                : [...formData.schedule.days, day],
                            },
                          })
                        }
                      >
                        {day}
                      </Button>
                    )
                  )}
                </div>
              </div>
            )}

            {formData.schedule.frequency === "monthly" && (
              <div className="space-y-2">
                <Label className="text-gray-300 font-light">Date</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        "w-full justify-start text-left font-light border-gray-700 bg-[#111] text-white hover:bg-gray-800",
                        !formData.schedule.date && "text-gray-500"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {formData.schedule.date ? (
                        format(formData.schedule.date, "PPP")
                      ) : (
                        <span>Pick a date</span>
                      )}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0 bg-[#111] border-gray-800">
                    <Calendar
                      mode="single"
                      selected={formData.schedule.date}
                      onSelect={(date) =>
                        setFormData({
                          ...formData,
                          schedule: { ...formData.schedule, date },
                        })
                      }
                      initialFocus
                      className="bg-[#111] text-white"
                    />
                  </PopoverContent>
                </Popover>
              </div>
            )}
          </div>
        </TabsContent>

        <TabsContent value="filters" className="space-y-4 pt-4">
          <div className="space-y-4">
            <div className="space-y-2">
              <Label className="text-gray-300 font-light">Keywords</Label>
              <Textarea
                placeholder="Enter keywords (one per line)"
                value={formData.filters.keywords.join("\n")}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    filters: {
                      ...formData.filters,
                      keywords: e.target.value.split("\n").filter(Boolean),
                    },
                  })
                }
                className="bg-[#111] border-gray-800 text-white placeholder:text-gray-500 focus:border-gray-700 focus:ring-0"
              />
            </div>

            <div className="space-y-2">
              <Label className="text-gray-300 font-light">Exclude Keywords</Label>
              <Textarea
                placeholder="Enter keywords to exclude (one per line)"
                value={formData.filters.excludeKeywords.join("\n")}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    filters: {
                      ...formData.filters,
                      excludeKeywords: e.target.value.split("\n").filter(Boolean),
                    },
                  })
                }
                className="bg-[#111] border-gray-800 text-white placeholder:text-gray-500 focus:border-gray-700 focus:ring-0"
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label className="text-gray-300 font-light">Min Word Count</Label>
                <Input
                  type="number"
                  value={formData.filters.minWordCount}
                  onChange={(e) =>
                    setFormData({
                      ...formData,
                      filters: {
                        ...formData.filters,
                        minWordCount: parseInt(e.target.value) || 0,
                      },
                    })
                  }
                  className="bg-[#111] border-gray-800 text-white focus:border-gray-700 focus:ring-0"
                />
              </div>
              <div className="space-y-2">
                <Label className="text-gray-300 font-light">Max Word Count</Label>
                <Input
                  type="number"
                  value={formData.filters.maxWordCount}
                  onChange={(e) =>
                    setFormData({
                      ...formData,
                      filters: {
                        ...formData.filters,
                        maxWordCount: parseInt(e.target.value) || 0,
                      },
                    })
                  }
                  className="bg-[#111] border-gray-800 text-white focus:border-gray-700 focus:ring-0"
                />
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Switch
                  id="include-images"
                  checked={formData.filters.includeImages}
                  onCheckedChange={(checked) =>
                    setFormData({
                      ...formData,
                      filters: {
                        ...formData.filters,
                        includeImages: checked,
                      },
                    })
                  }
                />
                <Label htmlFor="include-images" className="text-gray-300 font-light">Include Images</Label>
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Switch
                  id="include-pdf"
                  checked={formData.filters.includePDF}
                  onCheckedChange={(checked) =>
                    setFormData({
                      ...formData,
                      filters: {
                        ...formData.filters,
                        includePDF: checked,
                      },
                    })
                  }
                />
                <Label htmlFor="include-pdf" className="text-gray-300 font-light">Include PDF Documents</Label>
              </div>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="persona" className="space-y-4 pt-4">
          <div className="space-y-4">
            <div className="space-y-2">
              <Label className="text-gray-300 font-light">Select Persona</Label>
              <Select
                value={formData.personaId}
                onValueChange={(value) =>
                  setFormData({
                    ...formData,
                    personaId: value,
                  })
                }
              >
                <SelectTrigger className="bg-[#111] border-gray-800 text-white focus:ring-0 focus:border-gray-700">
                  <SelectValue placeholder="Select a persona" />
                </SelectTrigger>
                <SelectContent className="bg-[#111] border-gray-800 text-white">
                  {personas.map((persona) => (
                    <SelectItem 
                      key={persona.id} 
                      value={persona.id}
                      className="focus:bg-gray-800 focus:text-white"
                    >
                      {persona.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label className="text-gray-300 font-light">Status</Label>
              <Select
                value={formData.status}
                onValueChange={(value) =>
                  setFormData({
                    ...formData,
                    status: value,
                  })
                }
              >
                <SelectTrigger className="bg-[#111] border-gray-800 text-white focus:ring-0 focus:border-gray-700">
                  <SelectValue placeholder="Select status" />
                </SelectTrigger>
                <SelectContent className="bg-[#111] border-gray-800 text-white">
                  <SelectItem value="active" className="focus:bg-gray-800 focus:text-white">
                    <div className="flex items-center">
                      <span className="inline-flex items-center w-3 h-3 mr-2 rounded-full bg-green-900/30 text-green-400"></span>
                      <span>Active</span>
                    </div>
                  </SelectItem>
                  <SelectItem value="paused" className="focus:bg-gray-800 focus:text-white">
                    <div className="flex items-center">
                      <span className="inline-flex items-center w-3 h-3 mr-2 rounded-full bg-yellow-900/30 text-yellow-400"></span>
                      <span>Paused</span>
                    </div>
                  </SelectItem>
                  <SelectItem value="draft" className="focus:bg-gray-800 focus:text-white">
                    <div className="flex items-center">
                      <span className="inline-flex items-center w-3 h-3 mr-2 rounded-full bg-gray-800 text-gray-400"></span>
                      <span>Draft</span>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </TabsContent>
      </Tabs>

      <div className="flex justify-end space-x-4 pt-4">
        <Button 
          type="button" 
          variant="outline" 
          onClick={onCancel}
          className="border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white font-light"
        >
          Cancel
        </Button>
        <Button 
          type="submit"
          className="bg-white text-black hover:bg-gray-200 font-light"
        >
          {scrapingPackage ? 'Update' : 'Create'} Package
        </Button>
      </div>
    </form>
  );
}
</file>

<file path="src/components/forms/scraping-package-form.jsx">
"use client"

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";

export default function ScrapingPackageForm({ package: pkg, onSubmit, onCancel }) {
  const [formData, setFormData] = useState({
    name: pkg?.name || "",
    description: pkg?.description || "",
    status: pkg?.status || "inactive",
    schedule: {
      frequency: pkg?.schedule?.frequency || "daily",
      time: pkg?.schedule?.time || "09:00",
      days: pkg?.schedule?.days || ["monday"],
    },
    sources: pkg?.sources || [
      {
        name: "TechCrunch",
        enabled: true,
        url: "https://techcrunch.com",
      },
      {
        name: "Reuters Technology",
        enabled: false,
        url: "https://reuters.com/technology",
      },
    ],
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  const toggleSource = (index) => {
    const newSources = [...formData.sources];
    newSources[index] = {
      ...newSources[index],
      enabled: !newSources[index].enabled,
    };
    setFormData({ ...formData, sources: newSources });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-8">
      <div className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="name">Package Name</Label>
          <Input
            id="name"
            placeholder="Enter package name"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="description">Description</Label>
          <Textarea
            id="description"
            placeholder="Describe this package's purpose..."
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
          />
        </div>
      </div>

      <div className="space-y-6">
        <h3 className="text-lg font-medium">Schedule Settings</h3>
        
        <div className="space-y-4">
          <div className="space-y-2">
            <Label>Frequency</Label>
            <div className="flex gap-2">
              <Button
                type="button"
                variant={formData.schedule.frequency === "daily" ? "default" : "outline"}
                size="sm"
                onClick={() => setFormData({
                  ...formData,
                  schedule: { ...formData.schedule, frequency: "daily" }
                })}
              >
                Daily
              </Button>
              <Button
                type="button"
                variant={formData.schedule.frequency === "weekly" ? "default" : "outline"}
                size="sm"
                onClick={() => setFormData({
                  ...formData,
                  schedule: { ...formData.schedule, frequency: "weekly" }
                })}
              >
                Weekly
              </Button>
              <Button
                type="button"
                variant={formData.schedule.frequency === "monthly" ? "default" : "outline"}
                size="sm"
                onClick={() => setFormData({
                  ...formData,
                  schedule: { ...formData.schedule, frequency: "monthly" }
                })}
              >
                Monthly
              </Button>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="time">Time</Label>
              <Select
                value={formData.schedule.time}
                onValueChange={(value) =>
                  setFormData({
                    ...formData,
                    schedule: { ...formData.schedule, time: value }
                  })
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select time" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="09:00">9:00 AM</SelectItem>
                  <SelectItem value="12:00">12:00 PM</SelectItem>
                  <SelectItem value="15:00">3:00 PM</SelectItem>
                  <SelectItem value="18:00">6:00 PM</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {formData.schedule.frequency === "weekly" && (
              <div className="space-y-2">
                <Label htmlFor="day">Day of Week</Label>
                <Select
                  value={formData.schedule.days[0]}
                  onValueChange={(value) =>
                    setFormData({
                      ...formData,
                      schedule: { ...formData.schedule, days: [value] }
                    })
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select day" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="monday">Monday</SelectItem>
                    <SelectItem value="tuesday">Tuesday</SelectItem>
                    <SelectItem value="wednesday">Wednesday</SelectItem>
                    <SelectItem value="thursday">Thursday</SelectItem>
                    <SelectItem value="friday">Friday</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-medium">Content Sources</h3>
          <Button type="button" variant="outline" size="sm">Add Source</Button>
        </div>

        <div className="space-y-4">
          {formData.sources.map((source, index) => (
            <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
              <div className="space-y-1">
                <p className="font-medium">{source.name}</p>
                <p className="text-sm text-muted-foreground">{source.url}</p>
              </div>
              <Switch
                checked={source.enabled}
                onCheckedChange={() => toggleSource(index)}
              />
            </div>
          ))}
        </div>
      </div>

      <div className="flex justify-end gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit">Save Package</Button>
      </div>
    </form>
  );
}
</file>

<file path="src/components/scraping-package-history.jsx">
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from "@/components/ui/table";
import { Calendar, FileText, ArrowDownToLine } from "lucide-react";
import { Input } from "@/components/ui/input";
import { 
  Select, SelectContent, SelectItem, SelectTrigger, SelectValue 
} from "@/components/ui/select";
import { Search, Filter } from "lucide-react";

export function ScrapingPackageHistory({ packageId, onClose }) {
  const [history, setHistory] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");

  useEffect(() => {
    // Mock loading history data
    const mockHistory = [
      {
        id: "hist_1",
        packageId: packageId,
        runDate: "2025-01-15T10:00:00Z",
        status: "success",
        itemsFound: 24,
        itemsProcessed: 24,
        duration: "3m 45s",
        error: null
      },
      {
        id: "hist_2",
        packageId: packageId,
        runDate: "2025-01-08T10:00:00Z",
        status: "success",
        itemsFound: 18,
        itemsProcessed: 18,
        duration: "2m 30s",
        error: null
      },
      {
        id: "hist_3",
        packageId: packageId,
        runDate: "2025-01-01T10:00:00Z",
        status: "failed",
        itemsFound: 26,
        itemsProcessed: 3,
        duration: "0m 42s",
        error: "Connection timeout after 40s"
      },
      {
        id: "hist_4",
        packageId: packageId,
        runDate: "2025-01-22T10:00:00Z",
        status: "scheduled",
        itemsFound: null,
        itemsProcessed: null,
        duration: null,
        error: null
      },
      {
        id: "hist_5",
        packageId: packageId,
        runDate: "2025-01-16T14:30:00Z",
        status: "running",
        itemsFound: 12,
        itemsProcessed: 5,
        duration: "1m 22s (running)",
        error: null
      }
    ];
    
    setTimeout(() => {
      setHistory(mockHistory);
      setIsLoading(false);
    }, 500);
  }, [packageId]);

  const formatDate = (dateString) => {
    if (!dateString) return "N/A";
    try {
      return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (error) {
      console.error("Error formatting date:", error);
      return "Invalid Date";
    }
  };

  const filteredHistory = history.filter(item => {
    const matchesSearch = 
      (item.runDate && item.runDate.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (item.status && item.status.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesStatus = statusFilter === "all" || 
      (statusFilter === "completed" && item.status === "success") ||
      (statusFilter === "failed" && item.status === "failed") ||
      (statusFilter === "running" && item.status === "running") ||
      (statusFilter === "scheduled" && item.status === "scheduled");
    
    return matchesSearch && matchesStatus;
  });

  const getStatusBadge = (status) => {
    switch (status) {
      case "success":
        return <Badge className="bg-green-600 text-white hover:bg-green-700">Completed</Badge>;
      case "failed":
        return <Badge className="bg-red-600 text-white hover:bg-red-700">Failed</Badge>;
      case "running":
        return <Badge className="bg-blue-600 text-white hover:bg-blue-700">Running</Badge>;
      case "scheduled":
        return <Badge className="bg-gray-600 text-white hover:bg-gray-700">Scheduled</Badge>;
      default:
        return <Badge>{status}</Badge>;
    }
  };

  if (isLoading) {
    return <div className="py-4 text-center text-gray-400">Loading history...</div>;
  }

  return (
    <div className="space-y-4 text-white">
      <div className="flex flex-col sm:flex-row gap-4 mb-4">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search history..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-9 bg-[#1e1f23] border-[#2d2e33] text-white placeholder:text-gray-500 focus:border-[#e80566] focus:ring-0"
          />
        </div>
        
        <div className="flex items-center space-x-2">
          <Filter className="h-4 w-4 text-gray-400" />
          <Select
            value={statusFilter}
            onValueChange={setStatusFilter}
          >
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Statuses</SelectItem>
              <SelectItem value="completed">Completed</SelectItem>
              <SelectItem value="failed">Failed</SelectItem>
              <SelectItem value="running">Running</SelectItem>
              <SelectItem value="scheduled">Scheduled</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="border border-[#2d2e33] rounded-md overflow-hidden">
        <Table className="bg-[#1a1b1f]">
          <TableCaption className="text-gray-400">
            {filteredHistory.length === 0 
              ? "No history found"
              : `Showing ${filteredHistory.length} run${filteredHistory.length !== 1 ? 's' : ''}`}
          </TableCaption>
          <TableHeader className="bg-[#1e1f23]">
            <TableRow className="border-b border-[#2d2e33] hover:bg-transparent">
              <TableHead className="text-gray-300 font-medium">Date</TableHead>
              <TableHead className="text-gray-300 font-medium">Status</TableHead>
              <TableHead className="text-gray-300 font-medium">Items Found</TableHead>
              <TableHead className="text-gray-300 font-medium">Processed</TableHead>
              <TableHead className="text-gray-300 font-medium">Duration</TableHead>
              <TableHead className="text-gray-300 font-medium text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredHistory.length === 0 ? (
              <TableRow className="border-b border-[#2d2e33] hover:bg-[#262730]">
                <TableCell colSpan={6} className="text-center py-8 text-gray-400">
                  No history entries match your search
                </TableCell>
              </TableRow>
            ) : (
              filteredHistory.map((item) => (
                <TableRow key={item.id} className="border-b border-[#2d2e33] hover:bg-[#262730]">
                  <TableCell className="font-medium">{formatDate(item.runDate)}</TableCell>
                  <TableCell>{getStatusBadge(item.status)}</TableCell>
                  <TableCell>{item.itemsFound ?? "—"}</TableCell>
                  <TableCell>{item.itemsProcessed ?? "—"}</TableCell>
                  <TableCell>{item.duration ?? "—"}</TableCell>
                  <TableCell className="text-right">
                    <Button 
                      variant="outline" 
                      size="sm"
                      className="border-[#2d2e33] text-gray-300 hover:bg-[#2d2e33] hover:text-white"
                    >
                      <FileText className="h-4 w-4 mr-2" />
                      View Report
                    </Button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      <div className="flex justify-between mt-6">
        <Button variant="outline" size="sm" className="border-[#2d2e33] text-gray-300 hover:bg-[#2d2e33] hover:text-white">
          <ArrowDownToLine className="h-4 w-4 mr-2" />
          Export History
        </Button>
        <Button onClick={onClose} className="bg-[#e80566] hover:bg-[#c30552] text-white">Close</Button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/alert-dialog.jsx">
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/70 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-md translate-x-[-50%] translate-y-[-50%] gap-4 border border-gray-800 bg-[#111] p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-light text-white", className)} {...props} />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-gray-400 font-light", className)}
    {...props}
  />
))
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded px-4 py-2 text-sm font-light ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-white text-black hover:bg-gray-200",
      className
    )}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded px-4 py-2 text-sm font-light ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-transparent border border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/badge.jsx">
import * as React from "react"
import { cva } from "class-variance-authority"
import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  ...props
}) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.jsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props} />
  );
}

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.jsx">
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
</file>

<file path="src/components/ui/card.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props} />)
  );
}

function CardHeader({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props} />)
  );
}

function CardTitle({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props} />)
  );
}

function CardDescription({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />)
  );
}

function CardAction({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props} />)
  );
}

function CardContent({
  className,
  ...props
}) {
  return (<div data-slot="card-content" className={cn("px-6", className)} {...props} />);
}

function CardFooter({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props} />)
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="src/components/ui/data-table.jsx">
"use client";

import { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

export function DataTable({
  columns,
  data,
  searchKey,
  pageSize = 10,
  className,
}) {
  const [search, setSearch] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [sortConfig, setSortConfig] = useState({ key: null, direction: "asc" });

  // Filter data based on search
  const filteredData = data.filter((item) =>
    item[searchKey].toLowerCase().includes(search.toLowerCase())
  );

  // Sort data
  const sortedData = [...filteredData].sort((a, b) => {
    if (!sortConfig.key) return 0;
    const aValue = a[sortConfig.key];
    const bValue = b[sortConfig.key];
    if (aValue < bValue) return sortConfig.direction === "asc" ? -1 : 1;
    if (aValue > bValue) return sortConfig.direction === "asc" ? 1 : -1;
    return 0;
  });

  // Paginate data
  const totalPages = Math.ceil(sortedData.length / pageSize);
  const paginatedData = sortedData.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  // Handle sort
  const handleSort = (key) => {
    setSortConfig((prev) => ({
      key,
      direction:
        prev.key === key && prev.direction === "asc" ? "desc" : "asc",
    }));
  };

  return (
    <div className={className}>
      <div className="flex items-center justify-between mb-4">
        <Input
          placeholder="Search..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="max-w-sm"
        />
        <Select
          value={pageSize.toString()}
          onValueChange={(value) => {
            setPageSize(parseInt(value));
            setCurrentPage(1);
          }}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Select page size" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="5">5 per page</SelectItem>
            <SelectItem value="10">10 per page</SelectItem>
            <SelectItem value="20">20 per page</SelectItem>
            <SelectItem value="50">50 per page</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              {columns.map((column) => (
                <TableHead
                  key={column.key}
                  className="cursor-pointer"
                  onClick={() => handleSort(column.key)}
                >
                  <div className="flex items-center gap-2">
                    {column.label}
                    {sortConfig.key === column.key && (
                      <span>
                        {sortConfig.direction === "asc" ? "↑" : "↓"}
                      </span>
                    )}
                  </div>
                </TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {paginatedData.map((item, index) => (
              <TableRow key={item.id || index}>
                {columns.map((column) => (
                  <TableCell key={column.key}>
                    {column.render ? column.render(item) : item[column.key]}
                  </TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      <div className="flex items-center justify-between mt-4">
        <div className="text-sm text-gray-500">
          Showing {paginatedData.length} of {filteredData.length} results
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
            disabled={currentPage === 1}
          >
            Previous
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() =>
              setCurrentPage((prev) => Math.min(prev + 1, totalPages))
            }
            disabled={currentPage === totalPages}
          >
            Next
          </Button>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/input.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({
  className,
  type,
  ...props
}) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props} />
  );
}

export { Input }
</file>

<file path="src/components/ui/label.jsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props} />
  );
}

export { Label }
</file>

<file path="src/components/ui/modal.jsx">
"use client";

import { useEffect } from "react";
import { X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

export function Modal({
  isOpen,
  onClose,
  title,
  children,
  footer,
  className,
}) {
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === "Escape") onClose();
    };

    if (isOpen) {
      document.addEventListener("keydown", handleEscape);
      document.body.style.overflow = "hidden";
    }

    return () => {
      document.removeEventListener("keydown", handleEscape);
      document.body.style.overflow = "unset";
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 p-4">
      <div
        className={cn(
          "relative w-full max-w-md overflow-hidden rounded border border-gray-800 bg-[#111] shadow-lg",
          className
        )}
      >
        <div className="flex items-center justify-between border-b border-gray-800 p-4">
          <h2 className="text-lg font-light text-white">{title}</h2>
          <Button
            onClick={onClose}
            variant="ghost"
            size="icon"
            className="text-gray-400 hover:text-white hover:bg-gray-800"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
        <div className="p-4">{children}</div>
        {footer && (
          <div className="flex justify-end gap-4 pt-4 border-t">
            {footer}
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/nav.jsx">
'use client'
import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";

const navItems = [
  {
    label: "Home",
    href: "/",
  },
  {
    label: "Projects",
    href: "/projects",
  },
  {
    label: "Scraping Packages",
    href: "/scraping-packages",
  },
  {
    label: "Global Settings",
    href: "/settings",
  },
];

export function MainNav() {
  const pathname = usePathname();

  return (
    <nav className="border-b bg-white">
      <div className="container mx-auto px-4">
        <div className="flex h-16 items-center justify-between">
          <div className="flex items-center gap-8">
            <Link href="/" className="font-bold text-xl">
              PROTON
            </Link>
            <div className="hidden md:flex items-center gap-1">
              {navItems.map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  className={cn(
                    "px-4 py-2 text-sm font-medium transition-colors hover:text-primary",
                    pathname === item.href
                      ? "text-primary border-b-2 border-primary"
                      : "text-muted-foreground"
                  )}
                >
                  {item.label}
                </Link>
              ))}
            </div>
          </div>
          
          <div className="flex items-center gap-4">
            <button className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center text-sm font-medium">
              JD
            </button>
          </div>
        </div>
      </div>
    </nav>
  );
}
</file>

<file path="src/components/ui/popover.jsx">
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"
import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root
const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/select.jsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}>
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn("p-1", position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1")}>
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props} />
  );
}

function SelectItem({
  className,
  children,
  ...props
}) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}>
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props} />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...props}>
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...props}>
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="src/components/ui/status-badge.jsx">
"use client";

import { cn } from "@/lib/utils";

const statusColors = {
  Active: "bg-green-100 text-green-800",
  Archived: "bg-gray-100 text-gray-800",
  Pending: "bg-yellow-100 text-yellow-800",
  Scheduled: "bg-blue-100 text-blue-800",
  Sent: "bg-green-100 text-green-800",
  Failed: "bg-red-100 text-red-800",
  Draft: "bg-gray-100 text-gray-800",
  Inactive: "bg-gray-100 text-gray-800",
  Unsubscribed: "bg-red-100 text-red-800"
};

export function StatusBadge({ status, className }) {
  return (
    <span
      className={cn(
        "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium",
        statusColors[status] || "bg-gray-100 text-gray-800",
        className
      )}
    >
      {status}
    </span>
  );
}
</file>

<file path="src/components/ui/switch.jsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.jsx">
"use client"

import * as React from "react"
import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.jsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/lib/mock-data.js">
// Mock data for the Proton CRM system

export const mockProjects = [
  {
    id: "proj_1",
    name: "Marketing Campaign 2025",
    description: "Q1 marketing campaign for client engagement",
    status: "Active",
    createdAt: "2025-01-10T10:00:00Z",
    lastUpdated: "2025-01-15T10:00:00Z",
    documents: 5,
    recipients: 156,
    nextNewsletter: "2025-01-20T09:00:00Z"
  },
  {
    id: "proj_2",
    name: "Product Launch Q2",
    description: "Product launch campaign for Q2 2025",
    status: "Active",
    createdAt: "2025-01-08T15:30:00Z",
    lastUpdated: "2025-01-14T15:30:00Z",
    documents: 3,
    recipients: 87,
    nextNewsletter: "2025-01-19T10:00:00Z"
  },
  {
    id: "proj_3",
    name: "Customer Feedback 2025",
    description: "Customer feedback and satisfaction survey",
    status: "Archived",
    createdAt: "2025-01-05T09:15:00Z",
    lastUpdated: "2025-01-12T09:15:00Z",
    documents: 2,
    recipients: 203,
    nextNewsletter: "2025-01-25T14:00:00Z"
  }
];

export const mockDocuments = [
  {
    id: "doc_1",
    name: "Q1 Marketing Strategy.pdf",
    type: "application/pdf",
    size: "2.4 MB",
    url: "https://example.com/documents/strategy.pdf",
    projectId: "proj_1",
    uploadedAt: "2025-01-15T10:00:00Z",
    updatedAt: "2025-01-15T10:00:00Z"
  },
  {
    id: "doc_2",
    name: "Product Roadmap.xlsx",
    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    size: "1.8 MB",
    url: "https://example.com/documents/roadmap.xlsx",
    projectId: "proj_2",
    uploadedAt: "2025-01-14T15:30:00Z",
    updatedAt: "2025-01-14T15:30:00Z"
  },
  {
    id: "doc_3",
    name: "Market Research Results.docx",
    type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    size: "3.2 MB",
    url: "https://example.com/documents/research.docx",
    projectId: "proj_1",
    uploadedAt: "2025-01-13T09:15:00Z",
    updatedAt: "2025-01-13T09:15:00Z"
  },
  {
    id: "doc_4",
    name: "Competitive Analysis.pdf",
    type: "application/pdf",
    size: "4.5 MB",
    url: "https://example.com/documents/analysis.pdf",
    projectId: "proj_1",
    uploadedAt: "2025-01-12T14:20:00Z",
    updatedAt: "2025-01-12T14:20:00Z"
  },
  {
    id: "doc_5",
    name: "Content Calendar.xlsx",
    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    size: "1.2 MB",
    url: "https://example.com/documents/calendar.xlsx",
    projectId: "proj_1",
    uploadedAt: "2025-01-10T11:45:00Z",
    updatedAt: "2025-01-10T11:45:00Z"
  }
];

export const mockRecipients = [
  {
    id: "rec_1",
    name: "John Doe",
    email: "john@example.com",
    persona: "Executive",
    status: "active",
    projectId: "proj_1",
    createdAt: "2025-01-10T10:00:00Z",
    updatedAt: "2025-01-10T10:00:00Z"
  },
  {
    id: "rec_2",
    name: "Jane Smith",
    email: "jane@example.com",
    persona: "Manager",
    status: "active",
    projectId: "proj_1",
    createdAt: "2025-01-10T10:05:00Z",
    updatedAt: "2025-01-10T10:05:00Z"
  },
  {
    id: "rec_3",
    name: "Robert Johnson",
    email: "robert@example.com",
    persona: "Executive",
    status: "active",
    projectId: "proj_1",
    createdAt: "2025-01-11T09:30:00Z",
    updatedAt: "2025-01-11T09:30:00Z"
  },
  {
    id: "rec_4",
    name: "Emily Davis",
    email: "emily@example.com",
    persona: "Manager",
    status: "inactive",
    projectId: "proj_1",
    createdAt: "2025-01-11T09:45:00Z",
    updatedAt: "2025-01-11T09:45:00Z"
  }
];

export const mockPersonas = [
  {
    id: "pers_1",
    name: "Executive",
    description: "Senior executives and decision makers",
    status: "active",
    createdAt: "2025-01-05T10:00:00Z",
    updatedAt: "2025-01-05T10:00:00Z"
  },
  {
    id: "pers_2",
    name: "Manager",
    description: "Middle management and team leaders",
    status: "active",
    createdAt: "2025-01-06T11:30:00Z",
    updatedAt: "2025-01-06T11:30:00Z"
  },
  {
    id: "pers_3",
    name: "Technical",
    description: "Technical staff and developers",
    status: "inactive",
    createdAt: "2025-01-07T14:20:00Z",
    updatedAt: "2025-01-07T14:20:00Z"
  }
];

export const mockScrapingPackages = [
  {
    id: "pkg_1",
    name: "Tech News Scraper",
    description: "Scrapes top tech news sites weekly",
    status: "active",
    schedule: "0 0 * * 1", // Every Monday at midnight
    lastRun: "2025-01-15T00:00:00Z",
    nextRun: "2025-01-22T00:00:00Z",
    projectId: "proj_1",
    createdAt: "2025-01-08T10:00:00Z",
    updatedAt: "2025-01-15T00:05:00Z"
  },
  {
    id: "pkg_2",
    name: "Industry Reports",
    description: "Daily industry report collection",
    status: "active",
    schedule: "0 9 * * *", // Every day at 9 AM
    lastRun: "2025-01-15T09:00:00Z",
    nextRun: "2025-01-16T09:00:00Z",
    projectId: "proj_2",
    createdAt: "2025-01-08T15:30:00Z",
    updatedAt: "2025-01-15T09:05:00Z"
  }
];

export const mockNewsletters = [
  {
    id: "news_1",
    subject: "Weekly Tech Update: January 20, 2025",
    content: "<h1>Weekly Tech Update</h1><p>Here's your weekly tech news summary...</p>",
    status: "Scheduled",
    scheduledFor: "2025-01-20T09:00:00Z",
    sentAt: null,
    projectId: "proj_1",
    recipients: 156,
    stats: {
      openRate: 0,
      clickRate: 0
    },
    createdAt: "2025-01-15T10:00:00Z",
    updatedAt: "2025-01-15T10:00:00Z"
  },
  {
    id: "news_2",
    subject: "Product Launch Preview: January 5, 2025",
    content: "<h1>Product Launch Preview</h1><p>Get ready for our upcoming product launch...</p>",
    status: "Sent",
    scheduledFor: "2025-01-05T10:00:00Z",
    sentAt: "2025-01-05T10:00:00Z",
    projectId: "proj_1",
    recipients: 156,
    stats: {
      openRate: 72.4,
      clickRate: 45.6
    },
    createdAt: "2025-01-03T15:30:00Z",
    updatedAt: "2025-01-05T10:05:00Z"
  },
  {
    id: "news_3",
    subject: "Market Insights: January 12, 2025",
    content: "<h1>Market Insights</h1><p>Latest market trends and analysis...</p>",
    status: "Sent",
    scheduledFor: "2025-01-12T10:00:00Z",
    sentAt: "2025-01-12T10:00:00Z",
    projectId: "proj_1",
    recipients: 156,
    stats: {
      openRate: 68.2,
      clickRate: 37.9
    },
    createdAt: "2025-01-10T14:30:00Z",
    updatedAt: "2025-01-12T10:05:00Z"
  }
];

export const mockActivity = [
  {
    id: "act_1",
    type: "DocumentUpload",
    typeIcon: "📄",
    projectName: "Marketing Campaign 2025",
    timestamp: "2025-01-15T10:00:00Z",
    details: "New document uploaded: Q1 Marketing Strategy.pdf"
  },
  {
    id: "act_2",
    type: "NewsletterSent",
    typeIcon: "📧",
    projectName: "Marketing Campaign 2025",
    timestamp: "2025-01-12T10:00:00Z",
    details: "Newsletter sent to 156 recipients"
  },
  {
    id: "act_3",
    type: "PersonaModified",
    typeIcon: "👤",
    projectName: "Marketing Campaign 2025",
    timestamp: "2025-01-11T15:30:00Z",
    details: "Updated persona settings for Executive group"
  }
];

export const mockMetrics = {
  totalProjects: 3,
  totalRecipients: 446,
  totalDocuments: 10,
  totalPackages: 5,
  newslettersSent: 12,
  newslettersOpened: 8
};

// Mock data for scraping packages
const scrapingPackages = [
  {
    id: 1,
    name: "Tech News Scraper",
    description: "Scrapes top tech news sites weekly",
    status: "active",
    schedule: "Weekly",
    lastRun: "2025-01-15T10:00:00Z",
    nextRun: "2025-01-22T10:00:00Z",
    createdAt: "2025-01-01T00:00:00Z",
    updatedAt: "2025-01-15T10:00:00Z",
  },
  {
    id: 2,
    name: "Industry Reports",
    description: "Daily industry report collection",
    status: "active",
    schedule: "Daily",
    lastRun: "2025-01-15T09:00:00Z",
    nextRun: "2025-01-16T09:00:00Z",
    createdAt: "2025-01-01T00:00:00Z",
    updatedAt: "2025-01-15T09:00:00Z",
  },
  {
    id: 3,
    name: "Market Analysis",
    description: "Monthly market analysis collection",
    status: "inactive",
    schedule: "Monthly",
    lastRun: "2025-01-01T08:00:00Z",
    nextRun: "2025-02-01T08:00:00Z",
    createdAt: "2025-01-01T00:00:00Z",
    updatedAt: "2025-01-01T00:00:00Z",
  },
];

// Mock API functions
export const mockApi = {
  // Projects
  getProjects: () => Promise.resolve(mockProjects),
  getProject: (id) => Promise.resolve(mockProjects.find(p => p.id === id)),
  createProject: (data) => Promise.resolve({ id: "4", ...data, createdAt: new Date().toISOString() }),
  updateProject: (id, data) => Promise.resolve({ id, ...data, updatedAt: new Date().toISOString() }),
  deleteProject: (id) => Promise.resolve({ success: true }),

  // Documents
  getProjectDocuments: (projectId) => {
    // Return all documents for project ID 1, otherwise filter
    if (projectId === "proj_1") {
      return Promise.resolve(mockDocuments.filter(d => d.projectId === projectId));
    }
    return Promise.resolve([]);
  },
  uploadDocument: (projectId, file) => Promise.resolve({
    id: Math.random().toString(36).substring(2, 9),
    name: file.name,
    type: file.type,
    size: "1.5 MB",
    url: URL.createObjectURL(file),
    projectId,
    uploadedAt: new Date().toISOString()
  }),
  deleteDocument: (id) => Promise.resolve({ success: true }),

  // Recipients
  getProjectRecipients: (projectId) => {
    // Return all recipients for project ID 1, otherwise return an empty array
    if (projectId === "proj_1") {
      return Promise.resolve(mockRecipients);
    }
    return Promise.resolve([]);
  },
  addRecipient: (projectId, data) => Promise.resolve({
    id: Math.random().toString(36).substring(2, 9),
    ...data,
    projectId,
    createdAt: new Date().toISOString()
  }),
  updateRecipient: (projectId, recipientId, data) => Promise.resolve({
    id: recipientId,
    ...data,
    projectId,
    updatedAt: new Date().toISOString()
  }),
  deleteRecipient: (projectId, recipientId) => Promise.resolve({ success: true }),

  // Newsletters
  getProjectNewsletters: (projectId) => {
    // Return all newsletters for project ID 1, otherwise return an empty array
    if (projectId === "proj_1") {
      return Promise.resolve(mockNewsletters);
    }
    return Promise.resolve([]);
  },
  createNewsletter: (projectId, data) => Promise.resolve({
    id: Math.random().toString(36).substring(2, 9),
    ...data,
    projectId,
    createdAt: new Date().toISOString()
  }),
  updateNewsletter: (id, data) => Promise.resolve({
    id,
    ...data,
    updatedAt: new Date().toISOString()
  }),
  sendNewsletter: (id) => Promise.resolve({
    id,
    status: "Sent",
    sentAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }),
  
  // Scraping Packages
  getScrapingPackages: () => Promise.resolve(mockScrapingPackages),
  getProjectPackages: (projectId) => Promise.resolve(mockScrapingPackages.filter(p => p.projectId === projectId)),
  createPackage: (data) => Promise.resolve({
    id: "pkg_" + Math.random().toString(36).substring(2, 9),
    ...data,
    createdAt: new Date().toISOString(),
    lastRun: null,
    nextRun: null
  }),
  updatePackage: (id, data) => Promise.resolve({
    id,
    ...data,
    updatedAt: new Date().toISOString()
  }),
  deletePackage: (id) => Promise.resolve({ success: true }),
  runPackage: (id) => Promise.resolve({
    id,
    lastRun: new Date().toISOString(),
    nextRun: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date().toISOString()
  }),

  // Personas
  getPersonas: () => Promise.resolve(mockPersonas),
  createPersona: (data) => Promise.resolve({
    id: "pers_" + Math.random().toString(36).substring(2, 9),
    ...data,
    createdAt: new Date().toISOString()
  }),
  updatePersona: (id, data) => Promise.resolve({
    id,
    ...data,
    updatedAt: new Date().toISOString()
  }),
  deletePersona: (id) => Promise.resolve({ success: true }),

  // Recipients for scraping packages (not tied to a project)
  getRecipients: () => Promise.resolve(
    mockRecipients.map(recipient => ({
      ...recipient,
      persona: recipient.persona === "Executive" ? "pers_1" : (recipient.persona === "Manager" ? "pers_2" : "pers_3")
    }))
  ),
  createRecipient: (data) => Promise.resolve({
    id: "rec_" + Math.random().toString(36).substring(2, 9),
    ...data,
    createdAt: new Date().toISOString()
  }),
  updateRecipient: (id, data) => Promise.resolve({
    id,
    ...data,
    updatedAt: new Date().toISOString()
  }),
  deleteRecipient: (id) => Promise.resolve({ success: true }),
};
</file>

<file path="src/lib/utils.js">
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{js,jsx}',
    './components/**/*.{js,jsx}',
    './app/**/*.{js,jsx}',
    './src/**/*.{js,jsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: {
        DEFAULT: '1rem',
        md: '1.5rem',
        lg: '2rem',
      },
      screens: {
        sm: '640px',
        md: '768px',
        lg: '1024px',
        xl: '1280px',
      },
    },
    extend: {
      fontFamily: {
        sans: ["Poppins", "sans-serif"],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="package.json">
{
  "name": "proton-shadcn-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.483.0",
    "next": "15.2.3",
    "react": "^19.0.0",
    "react-day-picker": "^9.6.3",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.2.4"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "tailwindcss": "^4"
  }
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --background: 0 0% 6%;
  --foreground: 0 0% 98%;
  --card: 0 0% 10%;
  --card-foreground: 0 0% 98%;
  --popover: 0 0% 10%;
  --popover-foreground: 0 0% 98%;
  --primary: 0 0% 98%;
  --primary-foreground: 0 0% 9%;
  --secondary: 240 76% 44%;
  --secondary-foreground: 0 0% 98%;
  --muted: 0 0% 15%;
  --muted-foreground: 0 0% 65%;
  --accent: 215 76% 44%;
  --accent-foreground: 0 0% 98%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 18%;
  --input: 0 0% 18%;
  --ring: 0 0% 83.1%;
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
  --radius: 0.5rem;
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --destructive-foreground: oklch(0.985 0 0);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="src/components/layout/main-nav.jsx">
"use client"

import Link from "next/link"
import { usePathname } from "next/navigation"
import { cn } from "@/lib/utils"

export function MainNav() {
  const pathname = usePathname()

  return (
    <nav>
      <ul className="flex space-x-8">
        <li>
          <Link
            href="/"
            className={cn(
              "text-sm font-light transition-colors hover:text-white",
              pathname === "/" ? "text-white" : "text-gray-400"
            )}
          >
            Overview
          </Link>
        </li>
        <li>
          <Link
            href="/projects"
            className={cn(
              "text-sm font-light transition-colors hover:text-white",
              pathname.startsWith("/projects") ? "text-white" : "text-gray-400"
            )}
          >
            Projects
          </Link>
        </li>
        <li>
          <Link
            href="/scraping-packages"
            className={cn(
              "text-sm font-light transition-colors hover:text-white",
              pathname.startsWith("/scraping-packages") ? "text-white" : "text-gray-400"
            )}
          >
            Content Sources
          </Link>
        </li>
      </ul>
    </nav>
  )
}
</file>

<file path="src/components/layout/site-header.jsx">
import { MainNav } from "./main-nav"
import Link from "next/link"
import Image from "next/image"

export function SiteHeader() {
  return (
    <header className="w-full border-b border-gray-800 bg-black">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 items-center justify-between">
          <div className="flex items-center">
            <Link href="/" className="text-xl font-light text-white mr-8">
              <Image 
                src="/proton logo.svg" 
                alt="Proton AI"
                width={120}
                height={36}
                priority
              />
            </Link>
            <MainNav />
          </div>
          <div>
            <Link 
              href="/settings" 
              className="text-sm font-light text-gray-400 hover:text-white transition-colors"
            >
              Settings
            </Link>
          </div>
        </div>
      </div>
    </header>
  )
}
</file>

<file path="src/app/layout.js">
import { Poppins } from "next/font/google";
import "./globals.css";
import { cn } from "@/lib/utils";
import { SiteHeader } from "@/components/layout/site-header";

const poppins = Poppins({
  subsets: ["latin"],
  weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"],
  variable: "--font-poppins",
});

export const metadata = {
  title: "Proton - AI Signal Intelligence",
  description: "AI-powered content curation and delivery system by Proto",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={cn("min-h-screen bg-black text-white", poppins.className)}>
        <SiteHeader />
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {children}
        </div>
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.js">
import Link from "next/link"
import Image from "next/image"
import { Card } from "@/components/ui/card"

// Mock data for demonstration
const metrics = [
  {
    title: "Total Projects",
    value: "12",
    description: "Active projects in the system",
  },
  {
    title: "Total Recipients",
    value: "1,234",
    description: "Newsletter subscribers",
  },
  {
    title: "Total Documents",
    value: "456",
    description: "Uploaded documents",
  },
  {
    title: "Total Packages",
    value: "8",
    description: "Scraping packages",
  },
]

const recentProjects = [
  {
    id: 1,
    name: "Marketing Campaign 2025",
    description: "Q1 Marketing Strategy Analysis",
    lastUpdated: "2024-03-20",
    documentCount: 5,
    nextNewsletter: "2024-03-25",
  },
  {
    id: 2,
    name: "Product Launch",
    description: "New Product Line Analysis",
    lastUpdated: "2024-03-19",
    documentCount: 3,
    nextNewsletter: "2024-03-24",
  },
]

export default function Home() {
  return (
    <div>
      <div className="mb-12">
        <Image 
          src="/proton.svg" 
          alt="Proton" 
          width={240} 
          height={72} 
          className="mb-6"
          priority
        />
        <h1 className="text-3xl font-light tracking-tight mb-2">AI Signal Intelligence</h1>
        <p className="text-gray-400">Distinguishing signal from noise for strategic decision making</p>
      </div>
      {/* // life is okay */}
      <div className="space-y-10">
        {/* Metrics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-[#111] p-6 rounded border border-gray-800 hover:border-gray-700 transition-colors">
            <div className="space-y-2">
              <p className="text-sm text-gray-400 font-light">Active Clients</p>
              <div className="text-2xl font-light">8</div>
              <p className="text-xs text-gray-500 font-light">Currently monitoring</p>
            </div>
          </div>
          <div className="bg-[#111] p-6 rounded border border-gray-800 hover:border-gray-700 transition-colors">
            <div className="space-y-2">
              <p className="text-sm text-gray-400 font-light">Weekly Insights</p>
              <div className="text-2xl font-light">24</div>
              <p className="text-xs text-gray-500 font-light">Generated this week</p>
            </div>
          </div>
          <div className="bg-[#111] p-6 rounded border border-gray-800 hover:border-gray-700 transition-colors">
            <div className="space-y-2">
              <p className="text-sm text-gray-400 font-light">Content Sources</p>
              <div className="text-2xl font-light">156</div>
              <p className="text-xs text-gray-500 font-light">RSS feeds & APIs</p>
            </div>
          </div>
          <div className="bg-[#111] p-6 rounded border border-gray-800 hover:border-gray-700 transition-colors">
            <div className="space-y-2">
              <p className="text-sm text-gray-400 font-light">AI Models</p>
              <div className="text-2xl font-light">3</div>
              <p className="text-xs text-gray-500 font-light">Active processing chains</p>
            </div>
          </div>
        </div>

        {/* Recent Projects */}
        <div>
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-light">Active Client Projects</h2>
            <Link href="/projects" className="text-sm text-blue-400 hover:text-blue-300 font-light">
              View All Projects
            </Link>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-[#111] p-6 rounded border border-gray-800 hover:border-gray-700 transition-colors">
              <h3 className="text-lg font-light mb-1">Advent Health</h3>
              <p className="text-sm text-gray-400 mb-6 font-light">Healthcare Innovation Monitoring</p>
              
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-400 font-light">Last Updated</span>
                  <span className="text-sm font-light">2025-01-15</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-400 font-light">Sources</span>
                  <span className="text-sm font-light">42</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-400 font-light">Next Report</span>
                  <span className="text-sm font-light">2025-01-20</span>
                </div>
              </div>
            </div>
            
            <div className="bg-[#111] p-6 rounded border border-gray-800 hover:border-gray-700 transition-colors">
              <h3 className="text-lg font-light mb-1">Mars Pet Nutrition</h3>
              <p className="text-sm text-gray-400 mb-6 font-light">Pet Care Industry Intelligence</p>
              
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-400 font-light">Last Updated</span>
                  <span className="text-sm font-light">2025-01-14</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-400 font-light">Sources</span>
                  <span className="text-sm font-light">38</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-400 font-light">Next Report</span>
                  <span className="text-sm font-light">2025-01-19</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

</files>
